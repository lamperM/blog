<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Homepage 🌈 on Wangloo's BLOG</title><link>https://wangloo.github.io/</link><description>Recent content in Homepage 🌈 on Wangloo's BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>@2019 Notepadium.</copyright><lastBuildDate>Thu, 15 Sep 2022 15:14:05 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>操作系统——上下文切换</title><link>https://wangloo.github.io/posts/os/context/</link><pubDate>Mon, 14 Nov 2022 22:13:06 +0800</pubDate><guid>https://wangloo.github.io/posts/os/context/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/os/context/ -&lt;p>本文基于&lt;strong>AArch64&lt;/strong>执行环境, 介绍现代操作系统中上下文切换的相关内容.&lt;/p>
&lt;h2 id="什么是上下文">什么是上下文？&lt;/h2>
&lt;p>上下文又称“现场”,&lt;/p>
&lt;h2 id="为什么需要上下文切换">为什么需要上下文切换?&lt;/h2>
&lt;p>(TODO: 为什么说线程是调度的单位?)&lt;/p>
&lt;p>现代操作系统中同时存在着成千上百个线程, 但是一个CPU同一时刻只能运行一个线程, 他们是轮流的占用CPU, 也叫并发执行. (TODO: 如何查看线程切换的间隔?) 线程高频率的切换, 操作系统是如何保证切换到下一个执行的线程时, 它能够继续上次的工作呢?&lt;/p>
&lt;h3 id="什么是上下文-1">什么是上下文?&lt;/h3>
&lt;p>我们正在看一本书的时候如果被其他的事情打断, 返回时为了能够从上次被打断的位置继续读, 就要在被打断的时候记下来当前是读到了哪个第几页的第几行.&lt;/p>
&lt;p>操作系统对待线程也是如此, 需要保存的用于恢复线程执行的信息就称为线程的上下文.&lt;/p>
&lt;p>那么对于线程来说需要记下的内容有什么呢? 寄存器和栈即可. 拿AArch64架构来距离, 线程的上下文就是:&lt;/p>
&lt;ol>
&lt;li>通用寄存器&lt;code>x0-x29&lt;/code>: 函数调用的参数, 某些计算过程的中间值, 都要用到这些寄存器. &lt;strong>线程的执行流可能在任何时候被打断&lt;/strong>, 当然这些内容也不能丢.&lt;/li>
&lt;li>通用寄存器&lt;code>lr(x30)&lt;/code>: &lt;code>lr&lt;/code> 保存着返回地址, 即当前函数结束之后该返回到哪执行.&lt;/li>
&lt;li>栈顶指针 &lt;code>sp&lt;/code>: 栈的重要性无需多言. 但是需要说明的是我们保存栈的方式&lt;strong>并非将栈中的所有内容保存, 而是保存栈的位置&lt;/strong>即可. 因为操作系统有别的机制(TODO), 能够保证即便线程不在执行, 属于该线程的栈也不会被破坏.&lt;/li>
&lt;li>程序计数器 &lt;code>pc&lt;/code>: 被打断的线程如果再次执行, 从哪里执行呢? 显然是被打断指令的下一条(或者重新执行当前). 这个指令的地址当然也需要被保存好.&lt;/li>
&lt;li>PSTATE: 想一下, 有了以上的内容就能够保证线程完整的恢复之前的环境吗? 其他的例如中断是开还是关, 有哪些标志位(NZCV)被设置了. 这些信息在AArch64中是保存在PSTATE的各个字段中.&lt;/li>
&lt;/ol>
&lt;p>如果我们能够有一个适当的逻辑, 在线程切换出去的时候将上下文保存起来, 然后恢复新线程的上下文, 是不是线程切换这件事就能做到了. 如何组织这个保存和恢复的过程在下面会介绍到.&lt;/p>
&lt;h2 id="linux-如何处理上下文切换">Linux 如何处理上下文切换&lt;/h2>
&lt;h2 id="另一种处理上下文切换的思路">另一种处理上下文切换的思路&lt;/h2>
&lt;h2 id="协程的上下文">协程的上下文&lt;/h2>
&lt;p>协程是用户级别的线程,&lt;/p>
&lt;ul>
&lt;li>协程之间的切换不进入内核&lt;/li>
&lt;li>切换协程只能是某个协程&lt;strong>主动放弃控制权&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>我们在这里讨论一下协程切换时需要保存的上下文是否与线程有所不同.&lt;/p>
&lt;p>首先, PC一定属于, 这个毋庸置疑. 其次是栈顶指针sp, &lt;strong>每个协程都有单独的栈&lt;/strong>, 如果不保存栈的位置, 那么协程内部定义局部变量就没法访问了(局部变量的访问指令都是以sp为base的偏移来做的).&lt;/p>
&lt;p>另外, 关于通用寄存器, 由于协程的切换需要主动调用某个函数(通常叫做&lt;code>yield()&lt;/code>), 在函数的最后将PC设置为新协程的上下文PC. 保存当前协程上下文的操作也在这个函数中, 而其参数我们并不关心, 即&lt;code>x0&lt;/code>-&lt;code>x7&lt;/code>没必要保存. 同样的, &lt;strong>caller-saved寄存器也是没必要保存的&lt;/strong>, 因为这些寄存器作为函数调用使用的临时变量, 当再次返回该协程时, PC=yield()返回地址, caller如果关心这些寄存器应当自己执行保存和恢复. 但是&lt;strong>callee-saved寄存器必须要保存到上下文中&lt;/strong>, 因为在yield()中, 我们如果修改了callee-saved寄存器, 就需要在返回时(也就是再次调度到该协程时) 恢复, 这是callee该做的, 也就是上下文中应该有的唯一通用寄存器组.&lt;/p>
- https://wangloo.github.io/posts/os/context/ - @2019 Notepadium.</description></item><item><title>基于ARM64实现setjmp/longjmp</title><link>https://wangloo.github.io/posts/c/setjmp_and_longjmp/</link><pubDate>Tue, 01 Nov 2022 23:38:54 +0800</pubDate><guid>https://wangloo.github.io/posts/c/setjmp_and_longjmp/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/c/setjmp_and_longjmp/ -&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>setjmp() and longjmp() 是一对组合使用的函数, 可以实现&lt;strong>全局的goto&lt;/strong>.&lt;/p>
&lt;p>setjmp() 构造一个运行环境, 调用longjmp() 则将执行流切换到该环境.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">/* setjmp() 保存当前的运行环境(上下文)到 env 参数中 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">setjmp&lt;/span>(jmp_buf env);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">/* longjmp() 将控制流切换到 env 指定的运行环境 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">longjmp&lt;/span>(jmp_buf env, &lt;span style="color:#8be9fd">int&lt;/span> val);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用方法">使用方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;setjmp.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jmp_buf e;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">foo&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> longjmp(e, &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">/* After calling longjmp(), the execution flow back to setjmp(),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> and setjmp() will return not 0. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#ff79c6">=&lt;/span> setjmp(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (ret &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;Return from setjmp&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;Return from longjmp&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="基于-aarch64-的实现">基于 AArch64 的实现&lt;/h2>
&lt;p>需要保存的上下文包括&lt;/p>
&lt;ul>
&lt;li>&lt;strong>callee-saved 通用寄存器&lt;/strong>, 因为可能第一次调用 &lt;code>setjmp()&lt;/code> 之后的执行流修改了这些寄存器, 从第二次回到 &lt;code>setjmp()&lt;/code> 的角度来看, 就是执行setjmp() 中破坏的. caller-saved 寄存器则不必, 因为本来即便看作是 &lt;code>setjmp()&lt;/code> 破坏的, 也是正常的.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">.macro&lt;/span> func _name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">.global&lt;/span> \_name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">.type&lt;/span> \_name, %function
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>\&lt;span style="color:#8be9fd;font-style:italic">_name:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">.endm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">.macro&lt;/span> endfunc _name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">.size&lt;/span> \_name, .-\_name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">.endm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#50fa7b">setjmp&lt;/span> (jmp_buf env)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#50fa7b">See&lt;/span> also:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#50fa7b">longjmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * @&lt;span style="color:#50fa7b">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> - if returns from direct call,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#50fa7b">nonzero&lt;/span> - if returns after longjmp.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> */
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">func&lt;/span> setjmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">stp&lt;/span> x19, x20, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> stp x21, x22, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> stp x23, x24, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> stp x25, x26, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> stp x27, x28, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> stp x29, x18, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> mov x9, sp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">stp&lt;/span> lr, x9, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> mov x0, &lt;span style="color:#6272a4">#0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">endfunc&lt;/span> setjmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/**
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#50fa7b">longjmp&lt;/span> (jmp_buf env, int val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#8be9fd;font-style:italic">Note:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#50fa7b">if&lt;/span> val is not &lt;span style="color:#bd93f9">0&lt;/span>, then it would be returned from setjmp,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#50fa7b">otherwise&lt;/span> - &lt;span style="color:#bd93f9">1&lt;/span> would be returned.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#50fa7b">See&lt;/span> also:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * &lt;span style="color:#50fa7b">setjmp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> */
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">func&lt;/span> longjmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">ldp&lt;/span> x19, x20, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> ldp x21, x22, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> ldp x23, x24, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> ldp x25, x26, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> ldp x27, x28, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> ldp x29, x18, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> ldp lr, x9, [x0], &lt;span style="color:#6272a4">#16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> mov sp, x9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">mov&lt;/span> x0, x1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">cbnz&lt;/span> x0, &lt;span style="color:#bd93f9">1&lt;/span>f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">add&lt;/span> x0, x0, &lt;span style="color:#6272a4">#1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">ret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">endfunc&lt;/span> longjmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setjmp-实现-try-catch">setjmp() 实现 try-catch&lt;/h2>
- https://wangloo.github.io/posts/c/setjmp_and_longjmp/ - @2019 Notepadium.</description></item><item><title>Armv8 Kernel Monitor</title><link>https://wangloo.github.io/posts/os/monitor/</link><pubDate>Fri, 28 Oct 2022 22:56:19 +0800</pubDate><guid>https://wangloo.github.io/posts/os/monitor/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/os/monitor/ -&lt;p> &lt;/p>
&lt;h2 id="kernel-monitor-是什么">Kernel Monitor 是什么&lt;/h2>
&lt;p>Kernel Monitor 是一个适配我们微内核操作系统的 Kernel 调试和监控系统. 它能实现内核的动态调试和监控. 同时, 它还接管内核的同步异常和系统错误, 使开发者能够了解发生异常时系统的状态.&lt;/p>
&lt;p>Kernel Monitor 具有一定的可扩展性, 例如通过统计内核中存储的 TCB 来实时监控系统中所有线程的状态. 可根据开发者的需求添加统计的对象, 如 Endpoint, Capability等.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="kernel-monitor-总体设计">Kernel Monitor 总体设计&lt;/h2>
&lt;p>Kernel Monitor 系统包含 Clinet 和 Server 两个部分. 简单来说, Client 负责处理用户输入, 并将输入进行解析, 封装为 一系列基础命令. 发送给 Server. Server 负责执行这些 基础的命令, 如设置断点, 查看某个地址的值等.&lt;/p>
&lt;p>整个系统有&lt;em>两种架构&lt;/em>: 本地 Monitor 和远程 Monitor.&lt;/p>
&lt;p>本地monitor 和远程 monitor 的区别是: &lt;strong>Monitor Client 的位置在哪, 是否与 Server 在同一个机器上&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>先说 Monitor Server, 它必须嵌入要调试的 Kernel 中, &lt;strong>位于一个地址空间&lt;/strong>, 方便操作 Kernel 的内存.&lt;/p>
&lt;/blockquote>
&lt;h3 id="本地-monitor">本地 Monitor&lt;/h3>
&lt;p>在本地 Monitor 中, client 和 sever 都位于目标机(Target)上, 目标机通常是开发板.&lt;/p>
&lt;p>对于 AArch64 体系结构来说, 最多有四个异常等级(EL0-EL3). &lt;!-- raw HTML omitted -->Client 可以运行在EL2.&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;img src="./%E6%9C%AC%E5%9C%B0monitor.png" alt="image-20221029141414942">&lt;/p>
&lt;h3 id="远程-monitor">远程 Monitor&lt;/h3>
&lt;p>远程 Monitor 架构则不同, &lt;!-- raw HTML omitted -->Clinet 运行在宿主机(Host)上&lt;!-- raw HTML omitted -->, 通常是Linux. 它与 Server 的通信是通过网络/UART实现的.&lt;/p>
&lt;p>&lt;img src="./%E8%BF%9C%E7%A8%8Bmonitor.png" alt="image-20221029142002468">&lt;/p>
&lt;blockquote>
&lt;p>Monitor Client 运行在本地和远程对于实现的难度和用户体验有影响.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果 Client 实现在本地, 则 Client 无需实现网口和串口的驱动, 但Monitor 输入输出的串口与操作系统本身的串口相同, 信息冗杂在一起不易查看; 同时, 如果 Client 实现在本地, 那么对于ELF的解析需要在无操作系统提供的库支持下完成, 可能比较复杂.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果 Client 实现在远程, 即为 Linux 上的一个APP. 那么它和 Server 的通信就需要通过外部的网口或者串口(对于我们使用的64位开发板只引出了一个串口, 所以只能使用网口). 需要在 Server 上实现网口的驱动, 这部分比较复杂. 但是好处是 Client 的实现简单很多, 因为有 Linux APP 运行环境的支持. 同时, 远程 Monitor 架构下, Monitor 和 操作系统自身的输入输出分开, 用户可读性更好.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Server 是嵌入到Kernel的代码中, 与Client进行交互. 它是整个 Monitor 系统的后端, 负责实现基础的调试操作. 例如, 设置断点, 内存的读写, 寄存器的读写等.&lt;/p>
&lt;ul>
&lt;li>由于Server与 Kernel 位于同一个地址空间, 所以查看/修改内存的值是非常方便的. 对于寄存器也是同理.&lt;/li>
&lt;li>断点(Breakpoint), 监视点(Watchpoint), 单步执行(Soft step)的实现依赖与 ARMv8 提供的的 &lt;a href="https://developer.arm.com/-/media/Arm%20Developer%20Community/PDF/Learn%20the%20Architecture/V8A%20Self-hosted%20debug.pdf?revision=5eff4cc6-b4ca-4017-a07d-2957307058cb">self-hosted debug&lt;/a> 支持.&lt;/li>
&lt;/ul>
&lt;p>同时, Server 还负责监视系统中所有的 同步异常和系统错误. 一旦发生, 可在 Monitor 中查看某些内存, 寄存器的值定位问题发生的原因.&lt;/p>
&lt;h3 id="monitor-client-设计">Monitor Client 设计&lt;/h3>
&lt;p>Client 的构成可分为三个模块 :&lt;/p>
&lt;ul>
&lt;li>用户交互模块&lt;/li>
&lt;li>符号处理模块&lt;/li>
&lt;li>消息收发模块&lt;/li>
&lt;/ul>
&lt;p>用户交互模块负责处理用户的输入输出, 调用其他两个模块完成调试命令.&lt;/p>
&lt;p>符号处理模块负责解析可执行文件(ELF), 并建立静态符号表, 存储符号和地址的对应关系. 将用户输入的符号解析为虚拟地址, 或者反向解析.&lt;/p>
&lt;p>消息收发模块负责处理用户的输入, 将其转化为基础, 标准的命令, 发送给Server执行. Client 和 Server之间通信的数据包协议可以使用 &lt;a href="https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html">GDB Remote Serial Protocol&lt;/a> (以下简称RSP协议), 或者自己规定一个协议也是可行的.&lt;/p>
&lt;blockquote>
&lt;p>RSP协议支持三种基础命令:&lt;/p>
&lt;ol>
&lt;li>寄存器相关&lt;/li>
&lt;li>内存相关&lt;/li>
&lt;li>程序控制命令&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="启用-monitor-时-kernel-启动流程">启用 Monitor 时 Kernel 启动流程&lt;/h3>
&lt;ol>
&lt;li>Kernel 首先做必要的初始化, GIC, 异常向量表, MMU等.&lt;/li>
&lt;li>将控制权交给 Monitor, 等待用户输入.&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h2 id="kernel-debug-过程示例">Kernel debug 过程示例&lt;/h2>
&lt;h3 id="示例一-查看变量-var-的值">示例一: 查看变量 &lt;code>var&lt;/code> 的值&lt;/h3>
&lt;ol>
&lt;li>用户输入 &lt;code>print var&lt;/code> 指令.&lt;/li>
&lt;li>由符号处理模块, 将&lt;code>var&lt;/code>符号转为var 虚拟地址.&lt;/li>
&lt;li>由消息收发指令将请求封装为RSP协议包格式, 并发送到 Monitor Server.&lt;/li>
&lt;li>执行流程交给 Monitor Server, 它访问该地址, 将内容封装发回 Monitor Client.&lt;/li>
&lt;li>Client 输出&lt;code>var&lt;/code>的值, 继续等待用户输入&lt;/li>
&lt;/ol>
&lt;h3 id="示例二-添加断点到-main-函数">示例二: 添加断点到 &lt;code>main&lt;/code> 函数&lt;/h3>
&lt;ol>
&lt;li>用户输入 &lt;code>break main&lt;/code> 指令&lt;/li>
&lt;li>由符号处理模块, 解析得到 &lt;code>main&lt;/code> 函数的地址.&lt;/li>
&lt;li>消息收发模块将请求封装为RSP包格式, 发送到Monitor Server.&lt;/li>
&lt;li>执行流程交给 Server. 它执行 &lt;em>breakpoint exception 指令&lt;/em>, 并设置相关软件断点相关寄存器&lt;/li>
&lt;li>执行流交给 Kernel, 直到达到断点处(可使用地址+ContextID双重验证), 触发Debug异常&lt;/li>
&lt;li>Debug异常属于同步异常, 由 Monitor 系统接管, 回到 Client 继续等待用户输入&lt;/li>
&lt;/ol>
&lt;h3 id="示例三-单步执行">示例三: 单步执行&lt;/h3>
&lt;ol>
&lt;li>用户输入 &lt;code>step&lt;/code> 指令&lt;/li>
&lt;li>消息收发模块将请求封装为RSP包格式, 发送到 Monitor Server.&lt;/li>
&lt;li>执行流程交给 Server, 启用 software step. 然执行一次异常返回, 回到Kernel 继续执行.&lt;/li>
&lt;li>因为启用了 Software step, 回到 Kernel 执行完一条指令后, 就会触发 Debug异常&lt;/li>
&lt;li>Debug 异常属于同步异常, 由 Monitor 系统接管, 回到 Client 继续等待用户输入&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h2 id="其他拓展功能">其他拓展功能&lt;/h2>
&lt;p>back trace&lt;/p>
&lt;p>性能分析&lt;/p>
- https://wangloo.github.io/posts/os/monitor/ - @2019 Notepadium.</description></item><item><title>ARMv8-A MMU介绍</title><link>https://wangloo.github.io/posts/armv8/mmu/</link><pubDate>Thu, 29 Sep 2022 08:01:33 +0800</pubDate><guid>https://wangloo.github.io/posts/armv8/mmu/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/armv8/mmu/ -&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>MMU: 专用于将虚拟地址转换为物理地址. 通常配合分页机制来工作.&lt;/p>
&lt;p>页表: 页表中的表项包含提供虚拟地址和物理地址之间的映射.&lt;/p>
&lt;p>MMU就是直接访问页表, 并且通过将频繁使用的映射缓存到TLB中.&lt;/p>
&lt;h3 id="mmu-的结构">MMU 的结构&lt;/h3>
&lt;p>MMU是一种硬件, 可以通过在适当的安全状态下对其进行配置. 每个Core都有自己的MMU, 每个MMU包括:&lt;/p>
&lt;ol>
&lt;li>一个TLB, 缓存最近访问的映射.&lt;/li>
&lt;li>一个Table Walk Unit, 从内存中查询页表, 得到最终的虚拟地址-物理地址的映射.&lt;/li>
&lt;/ol>
&lt;p>MMU 控制着整个系统的缓存策略, 内存属性和访问权限. MMU开启后, 软件发出的所有内存访问都使用虚拟地址, 要求MMU为每次访问进行地址转换.&lt;/p>
&lt;h3 id="mmu-的配置">MMU 的配置&lt;/h3>
&lt;p>在启用MMU前, 必须告知其页表存放的位置.&lt;/p>
&lt;h3 id="mmu-地址转换的过程">MMU 地址转换的过程&lt;/h3>
&lt;p>对于每个转换请求, MMU首先检查TLB是否已经对该地址缓存, 如果该地址未缓存, 则需要遍历页表.&lt;/p>
&lt;p>页表遍历单元在页表中搜索相关的映射表项.&lt;/p>
&lt;ul>
&lt;li>一旦找到映射, MMU就会检查权限和属性. 决定允许本次访问, 或者发出故障信号.&lt;/li>
&lt;li>若未找到映射, 则触发缺页异常.&lt;/li>
&lt;/ul>
&lt;h3 id="页表的工作原理">页表的工作原理&lt;/h3>
&lt;p>页表的工作方式是将虚拟地址空间和物理地址空间划分为大小相等的块, 称为页面.&lt;/p>
&lt;p>页表中的每个表项对应着一块虚拟地址空间中的块, 表项的值就是这块虚拟地址空间对应的物理地址块, 以及访问物理地址时要使用的属性.&lt;/p>
&lt;p>在查表过程中, 将虚拟地址分为两部分:&lt;/p>
&lt;ul>
&lt;li>高阶位用作页表的索引. 用来找到对应的物理块&lt;/li>
&lt;li>低地址是块内的偏移量, 不会因为映射而改变. 页表项中的物理地址与该偏移组合形成用于访问内存的物理地址.&lt;/li>
&lt;/ul>
&lt;h4 id="多级页表">多级页表&lt;/h4>
&lt;p>实际实现中, 多采用多级页表的方案, 各级页表自定向下组成树的形式, 协作实现虚拟到物理地址的转换.&lt;/p>
&lt;p>树中的分支成为页目录, 页目录中的表项不是直接存储目标物理地址, 而是下一级页表的地址; 最后一级页表的表项中保存着目标物理地址.&lt;/p>
&lt;blockquote>
&lt;p>多级页表是减小页表占用存储空间过大的有效方案.&lt;/p>
&lt;/blockquote>
&lt;p>顶级页表将地址空间划分为大块, 每个表项可以指向大小相等的内存块. 也可以指向将块进行再次细分的下一级页表. 支持大块的优点:&lt;/p>
&lt;ul>
&lt;li>大的内存块需要查表的次数更少&lt;/li>
&lt;li>提升TLB的效率, 因为一个TLB表项覆盖更大的内存区域.&lt;/li>
&lt;/ul>
&lt;p>凡事都是有利有弊, 使用大块也增加了内存浪费, 实际使用时需要根据需要来权衡.&lt;/p>
&lt;h2 id="内存类型">内存类型&lt;/h2>
&lt;h3 id="普通类型内存">普通类型内存&lt;/h3>
&lt;p>普通类型的内存是弱一致性的(weakly ordered)内存模型, 没有额外的约束, 可以提供最高的内存访问性能.&lt;/p>
&lt;p>通常代码段, 数据段以及其他数据都放在普通内存中.&lt;/p>
&lt;p>普通内存允许处理器做很多优化, 如分支预测, 数据预取, Cache line预取, 乱序执行等.&lt;/p>
&lt;h3 id="设备类型内存">设备类型内存&lt;/h3>
&lt;p>CPU访问设备内存会有很多限制, 如不能进行数据预取等. 设备类型的内存严格按照指令的顺序来执行的.&lt;/p>
&lt;p>设备类型内容通常留给设备来访问, 例如中断控制器(GIC), 串口, 定时器等.&lt;/p>
&lt;h2 id="两套页表">两套页表&lt;/h2>
&lt;ul>
&lt;li>当CPU访问的地址属于&lt;em>用户空间&lt;/em>时, MMU会自动选择&lt;strong>TTBR0&lt;/strong>指向的页表.&lt;/li>
&lt;li>当CPU访问的地址属于&lt;em>内核空间&lt;/em>时. MMU会自动选择&lt;strong>TTBR1&lt;/strong>指向的页表&lt;/li>
&lt;/ul>
&lt;p>EL2和EL3没有TTBR1, 只有TTBR0. 也就意味着:&lt;/p>
&lt;p>• If EL2 is using AArch64, it can only use Virtual Addresses in the range 0x0 to 0x0000FFFF_FFFFFFFF.
• If EL3 is using AArch64, it can only use Virtual Addresses in the range 0x0 to 0x0000FFFF_FFFFFFFF.&lt;/p>
&lt;h2 id="越权-越界">越权, 越界&lt;/h2>
&lt;p>在未使用虚拟地址空间之前, 所有的用户程序都可以访问全部的物理内存, 所以恶意程序可以修改其他程序的内存数据, 这使得整个系统处于危险的状态. 每个进程的地址空间都要受到保护, 以免被其他进程有意/无意的破坏.&lt;/p>
&lt;p>现代操作系统中, 每个进程都有独立的虚拟地址空间. 在进程的角度上, 它拥有整个虚拟地址空间. 不同的进程可以同时使用一个虚拟地址, MMU通过页表将其映射到合适的物理地址.&lt;/p>
&lt;h3 id="两个物理地址空间">两个物理地址空间&lt;/h3>
&lt;p>ARMv8 体系结构定义两个物理地址空间: secure address space 和 non-secure address space.&lt;/p>
&lt;p>理论上, 安全和非安全的地址空间是相互独立的, 然而现实中大多数系统都将安全和非安全视为访问控制的属性. 正常(非安全)世界只能访问非安全的物理内存; 而安全世界可以访问这两个地址空间.&lt;/p>
&lt;h3 id="armv8-mmu权限控制">ARMv8 MMU权限控制&lt;/h3>
&lt;p>程序请求某个地址时, MMU需要进行权限检查. 如果请求的地址是数据, 则检查读写权限; 如果请求的是地址, 则检查其可执行权限.&lt;/p>
&lt;p>ARMv8 页表项的AP字段控制该不同异常等级下, 页面的读写权限.&lt;/p>
&lt;p>[表格]&lt;/p>
&lt;p>ARMv8 页表项的PNX字段和XN/UXN字段来设置CPU是否对这个页面有执行权限.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当系统有两套页表时, UXN是用来设置用户空间页面是否有可执行权限; PXN 用来设置特权空间的页面是否有可执行权限.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若系统只有一套页表, 则通过XN字段控制&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="页表的结构">页表的结构&lt;/h2>
&lt;h3 id="地址宽度">地址宽度&lt;/h3>
&lt;p>48bit&lt;/p>
&lt;h3 id="页面粒度">页面粒度&lt;/h3>
&lt;p>页面粒度表示一次最小分配内存块的大小. AArch64支持三种页的大小, 4KB, 16KB, 64KB. 支持哪一种是由实现定义的。创建页表的代码能够读取系统寄存器&lt;code>ID_AA64MMFR0_EL1&lt;/code>，以找出哪些是受支持的大小。Cortex-A53处理器支持所有三种尺寸，但有些处理器的早期版本并非如此，例如Cortex-A57，它不支持16K粒度。&lt;/p>
&lt;h3 id="aarch64-页表项结构">AArch64 页表项结构&lt;/h3>
&lt;h4 id="无效页表项">无效页表项&lt;/h4>
&lt;h4 id="table">table&lt;/h4>
&lt;h4 id="block">block&lt;/h4>
&lt;h3 id="页表结构4kb页面为例">页表结构(4KB页面为例)&lt;/h3>
&lt;p>以4KB页面粒度, 虚拟地址宽度为 48位. 使用4级页表.&lt;/p>
&lt;p>48位地址每层转换有9个地址位，即每层512个条目，最后12位选择4kB内的一个字节，直接来自原始地址&lt;/p>
&lt;h2 id="虚拟地址到物理地址的转换过程">虚拟地址到物理地址的转换过程&lt;/h2>
&lt;p>当处理器为获取指令或数据访问发出一个64位的虚拟地址时，MMU硬件将虚拟地址转换为相应的物理地址。对于虚拟地址，前16位[63:47]必须全部为0或1，否则地址将触发故障。&lt;/p>
&lt;h3 id="non-secure-and-secure-access">Non-secure and secure access&lt;/h3>
&lt;p>ARMv8-A架构定义了两种安全状态:安全的和非安全的。它还定义了两个物理地址空间:安全的和非安全的. 正常(非安全)世界只能访问非安全物理地址空间。安全世界可以访问两个物理地址空间。这也是通过转换表来控制的。&lt;/p>
&lt;p>在非安全状态下，转换表中的NS位和NSTable位将被忽略。只能访问非安全内存。在安全状态下，NS位和NSTable位控制虚拟地址转换为安全物理地址还是非安全物理地址。&lt;/p>
&lt;p>You can use SCR_EL3.SIF 来禁用安全世界访问非安全地址.&lt;/p>
&lt;h2 id="相关的寄存器">相关的寄存器&lt;/h2>
&lt;p>与地址转换相关的寄存器主要有以下几个:&lt;/p>
&lt;ol>
&lt;li>转换控制寄存器(TCR)&lt;/li>
&lt;li>系统控制寄存器(SCTLR)&lt;/li>
&lt;li>页表基地址寄存器(TTBR)&lt;/li>
&lt;/ol>
&lt;h3 id="tcr">TCR&lt;/h3>
&lt;p>IPS: 配置地址转换后输出物理地址的最大值&lt;/p>
&lt;p>TxSz: 配置输入地址的最大值, 即虚拟地址的宽度&lt;/p>
&lt;p>TG1: 配置TTBR1页表的页面粒度大小&lt;/p>
&lt;p>SHx: 配置TTBRx相关内存的Cache共享属性&lt;/p>
&lt;p>ORGNx:&lt;/p>
&lt;p>IRGNx:&lt;/p>
&lt;h3 id="sctlr">SCTLR&lt;/h3>
&lt;p>M: Disable/Enable MMU地址转换&lt;/p>
&lt;p>C: Disable/Enable Data Cache&lt;/p>
&lt;p>I: Disable/Enable Instruction Cache&lt;/p>
&lt;h3 id="ttbr">TTBR&lt;/h3>
&lt;p>存储页表的基地址&lt;/p>
&lt;h2 id="aarch32-虚拟内存系统">AArch32 虚拟内存系统&lt;/h2>
&lt;p>ARMv8 AArch32 的虚拟内存系统向后兼容ARMv7, 与ARMv7的基本一致.&lt;/p>
- https://wangloo.github.io/posts/armv8/mmu/ - @2019 Notepadium.</description></item><item><title>AArch64/32 异常返回过程</title><link>https://wangloo.github.io/posts/armv8/exception_return/</link><pubDate>Sat, 24 Sep 2022 21:19:01 +0800</pubDate><guid>https://wangloo.github.io/posts/armv8/exception_return/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/armv8/exception_return/ -&lt;h2 id="armv8-异常返回指令">ARMv8 异常返回指令&lt;/h2>
&lt;p>当异常处理程序结束后，需要执行&lt;em>异常返回指令&lt;/em>恢复进入异常之前的状态.&lt;/p>
&lt;p>具体要做的事情包括:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>恢复发生异常前的PC&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从SPSR中恢复PSTATE寄存器(现场)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>异常返回的指令根据当前&lt;strong>执行状态&lt;/strong>为AArch32还是AArch64有所不同.&lt;/p>
&lt;h3 id="aarch32">AArch32&lt;/h3>
&lt;p>AArch32的异常返回指令在不同的&lt;strong>模式&lt;/strong>下也有所不同:&lt;/p>
&lt;p>&lt;strong>若异常是在Hyp模式下处理:&lt;/strong> 仅可执行&lt;code>ERET&lt;/code>指令从异常返回.&lt;/p>
&lt;p>&lt;strong>若异常是在其他模式下处理&lt;/strong>, AArch32提供了以下的异常返回指令:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ERET&lt;/code> 指令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用带S后缀的数据处理指令直接操作PC(例如, &lt;code>MOVS, PC, LR&lt;/code>), 恢复PSTATE&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RFE 指令: &lt;code>RFE &amp;lt;Rn&amp;gt;&lt;/code>. 从基址寄存器&lt;!-- raw HTML omitted -->指向的地址依次加载PC和PSTATE&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LDM 指令: &lt;code>LDM &amp;lt;Rn&amp;gt; {pc..}&lt;/code>. 若目标寄存器中包含PC, 则会同时恢复PSTATE&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="aarch64">AArch64&lt;/h3>
&lt;p>AArch64下&lt;strong>统一使用&lt;/strong> &lt;code>ERET&lt;/code> 指令进行异常返回.&lt;/p>
&lt;h3 id="指令格式及用法参考">指令格式及用法参考&lt;/h3>
&lt;h4 id="eret">ERET&lt;/h4>
&lt;p>ERET指令完成了:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>从ELR_ELx中恢复PC指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从SPSR_ELx中恢复PSTATE寄存器的状态.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="ldmload-multiple">LDM(Load Multiple)&lt;/h4>
&lt;p>格式: &lt;code>LDM &amp;lt;Rn&amp;gt; {registers}&lt;/code>&lt;/p>
&lt;p>含义: 从基址寄存器&lt;code>&amp;lt;Rn&amp;gt;&lt;/code>指向的地址开始依次加载多个寄存器值. 若目标寄存器中包含PC, 则同时恢复PSTATE.&lt;/p>
&lt;p>例如: &lt;code>LDM &amp;lt;r0&amp;gt; {pc, r1}&lt;/code> 等价于:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">pc = [r0]
r1 = [r0+4]
PSTATE = SPSR ;仅当目标寄存器包含PC时自动完成
&lt;/code>&lt;/pre>&lt;h4 id="rfereturn-from-exception">RFE(Return From Exception)&lt;/h4>
&lt;p>格式: &lt;code>LDM &amp;lt;Rn&amp;gt; &lt;/code>&lt;/p>
&lt;p>含义: 从基址寄存器&lt;code>&amp;lt;Rn&amp;gt;&lt;/code>指向的地址依次加载PC和PSTATE.&lt;/p>
&lt;p>例如: &lt;code>RFE &amp;lt;r0&amp;gt;&lt;/code> 等价于:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-ass" data-lang="ass">pc = [r0]
PSTATE = [r0+4]
&lt;/code>&lt;/pre>- https://wangloo.github.io/posts/armv8/exception_return/ - @2019 Notepadium.</description></item><item><title>GNU C内联汇编学习笔记</title><link>https://wangloo.github.io/posts/c/inline-asm/</link><pubDate>Sat, 24 Sep 2022 16:48:58 +0800</pubDate><guid>https://wangloo.github.io/posts/c/inline-asm/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/c/inline-asm/ -&lt;h2 id="语句结构">语句结构&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">asm&lt;/span> &lt;span style="color:#ff79c6">asm&lt;/span>&lt;span style="color:#ff79c6">-&lt;/span>qualifiers ( &lt;span style="color:#8be9fd;font-style:italic">AssemblerTemplate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#8be9fd;font-style:italic">OutputOperands&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#8be9fd;font-style:italic">InputOperands&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#8be9fd;font-style:italic">Clobbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : GotoLabels)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>asm&lt;/code> keyword is a GNU extension. 当使用编译选项 &lt;code>-ansi&lt;/code> 或 &lt;code>-std&lt;/code> 时, 使用 &lt;code>__asm__&lt;/code>代替 &lt;code>asm&lt;/code>.&lt;/p>
&lt;h2 id="qualifiers">Qualifiers&lt;/h2>
&lt;ul>
&lt;li>volatile: 避免编译器的过分优化&lt;/li>
&lt;li>goto&lt;/li>
&lt;li>inline&lt;/li>
&lt;/ul>
&lt;h2 id="parameters">Parameters&lt;/h2>
&lt;p>&lt;em>AssemblerTemplate&lt;/em>: 字符串, 汇编代码的模板&lt;/p>
&lt;p>&lt;em>OutputOperands&lt;/em>: 输出操作数; 指令将会修改的变量集合&lt;/p>
&lt;p>&lt;em>InputOperands&lt;/em>: 输入操作数; 指令将读取的变量集合&lt;/p>
&lt;p>&lt;em>Clobbers&lt;/em>: ???TODO&lt;/p>
&lt;p>&lt;em>GotoLabels&lt;/em>: 仅当 qualifiers 使用&lt;code>goto&lt;/code>时, 声明label集合.&lt;/p>
&lt;blockquote>
&lt;p>The total number of input + output + goto operands is limited to 30.&lt;/p>
&lt;/blockquote>
&lt;p> &lt;/p>
&lt;h3 id="param-1-assemblertemplate">Param #1: AssemblerTemplate&lt;/h3>
&lt;p>多条语句可以放在一个asm字符串中, 但是更常见的是每条汇编语句使用一个字符串, 并在结束时使用换行符和制表符(&lt;code>\n&lt;/code>, &lt;code>\t&lt;/code>)来表示换行.&lt;/p>
&lt;blockquote>
&lt;p>貌似对于 arm 汇编, 只用 &lt;code>\n&lt;/code> 也OK?&lt;/p>
&lt;/blockquote>
&lt;p> &lt;/p>
&lt;h3 id="param-2-outputoperands">Param #2: OutputOperands&lt;/h3>
&lt;p>多个 OutputOperands 之间使用&lt;code>,&lt;/code>隔开, 每个 OutputOperands 的格式如下:&lt;/p>
&lt;pre tabindex="0">&lt;code>[ [asmSymbolicName] ] constraint (cvariablename)
&lt;/code>&lt;/pre>&lt;p>&lt;em>asmSymbolicName&lt;/em>: 指定该操作数的名称&lt;/p>
&lt;p>&lt;em>constraint&lt;/em>: 对该操作数的一些限制&lt;/p>
&lt;pre tabindex="0">&lt;code>// 描述操作数的权限, 输出操作数的约束必须以此开头
= 忽略现有值
+ 读写, 当原先值有意义时用它
&amp;amp; 禁止编译器将该操作数与不相关的输入操作数分配同一个寄存器
// 描述输出操作数所在位置, 如果你不知道, 可以同时设置, 编译器会帮你决定
r 寄存器
m 内存
// 架构相关的
z AArch64中存在. 表达可以使用零寄存器(XZR or WZR). Useful when combined
with `r` to represent an operand that can be either a general-purpose register
or the zero register.
&lt;/code>&lt;/pre>&lt;p>&lt;em>cvariablename&lt;/em>: 输出到的 C 语言变量名&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="param-3-input-operands">Param #3: Input Operands&lt;/h3>
&lt;p>输入操作数的格式与输出操作数基本一致:&lt;/p>
&lt;pre tabindex="0">&lt;code>[ [asmSymbolicName] ] constraint (cexpression)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>对于输入操作数, 一般没有别的限制, 仅使用&lt;code>&amp;quot;r&amp;quot;(val)&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p> &lt;/p>
&lt;h3 id="param-4-clobbers">Param #4: Clobbers&lt;/h3>
&lt;p>每个 clobber 都是用双引号括起来, 并用逗号分隔的字符串常量.&lt;/p>
&lt;p>常用的 clobber 参数:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&amp;ldquo;memory&amp;rdquo;&lt;br>
告诉编译器, 这段内联汇编代码对输入和输出操作数中列出的项以外的内存读取或写入操作(例如，访问输入参数之一指向的内存). 为确保内存包含正确的值，GCC可能需要在执行ASM之前将特定寄存器值刷新到内存。此外, 阻止编译器越过该 ASM 语句进行 reorder, 形成针对编译器的 memory barrier. 注意, 此 clobber 不会阻止处理器在ASM语句之后执行推测性读取。为了防止出现这种情况，您需要特定于处理器的防护指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ldquo;cc&amp;rdquo;&lt;br>
This stands for &amp;ldquo;condition codes&amp;rdquo;. Since the add instruction will affect the carry flag amongst other things, we need to tell gcc about it. Otherwise it might want to split a test-and-branch around our code. If it did so, the branch might go the wrong way due to the condition codes being corrupted. Basically, any inline asm that does arithmetic should explicitly clobber the flags like this.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="param-5-gotolabels">Param #5: GotoLabels&lt;/h3>
&lt;p>尽量不使用, 可以在ASM的内部直接定义 label&lt;/p>
&lt;p>TODO&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="样例">样例&lt;/h2>
&lt;h3 id="最简单的模板">最简单的模板&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> src &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> dst;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">asm&lt;/span> (&lt;span style="color:#f1fa8c">&amp;#34;mov %1, %0&lt;/span>&lt;span style="color:#f1fa8c">\n\t&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;add $1, %0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;=r&amp;#34;&lt;/span> (dst)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;r&amp;#34;&lt;/span> (src));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>printf(&lt;span style="color:#f1fa8c">&amp;#34;%d&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, dst);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="操作数使用-asmsymbolicname">操作数使用 asmSymbolicName&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">uint32_t&lt;/span> c &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">uint32_t&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">uint32_t&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>e &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">asm&lt;/span> (&lt;span style="color:#f1fa8c">&amp;#34;mov %[e], %[d]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">:&lt;/span> [d] &lt;span style="color:#f1fa8c">&amp;#34;=rm&amp;#34;&lt;/span> (d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">:&lt;/span> [e] &lt;span style="color:#f1fa8c">&amp;#34;rm&amp;#34;&lt;/span> (&lt;span style="color:#ff79c6">*&lt;/span>e));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="内部定义-label">内部定义 label&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">long&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">long&lt;/span> ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">asm&lt;/span> &lt;span style="color:#50fa7b">volatile&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;1: &lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;ldxr %0, [%2]&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;sub %0, %0, %3&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;stxr %w1, %0, [%2]&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f1fa8c">&amp;#34;cbnz %w1, 1b&lt;/span>&lt;span style="color:#f1fa8c">\n\t&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;=&amp;amp;r&amp;#34;&lt;/span>(ret), &lt;span style="color:#f1fa8c">&amp;#34;=&amp;amp;r&amp;#34;&lt;/span>(temp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;r&amp;#34;&lt;/span>(p), &lt;span style="color:#f1fa8c">&amp;#34;r&amp;#34;&lt;/span>(val)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;memory&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#Extended-Asm">Extended Asm (Using the GNU Compiler Collection (GCC))&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://developer.arm.com/documentation/100067/0612/armclang-Inline-Assembler/Inline-assembly-constraint-strings/Constraint-codes-for-AArch64-state">AArch64 Constraint codes&lt;/a>&lt;/p>
- https://wangloo.github.io/posts/c/inline-asm/ - @2019 Notepadium.</description></item><item><title>GICv3 介绍</title><link>https://wangloo.github.io/posts/armv8/gicv3/</link><pubDate>Sat, 10 Sep 2022 21:51:49 +0800</pubDate><guid>https://wangloo.github.io/posts/armv8/gicv3/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/armv8/gicv3/ -&lt;h1 id="gicv3generic-interrupt-controller---version-3">GICV3(Generic Interrupt Controller - version 3)&lt;/h1>
&lt;h2 id="关于gic">关于GIC&lt;/h2>
&lt;p>GIC即中断控制器, 负责管理中断的接收, 屏蔽, 路由等相关任务, 并向系统程序员提供配置的接口.&lt;/p>
&lt;p>GIC与异常模型协作完成中断的整个生命周期, GIC主要负责&lt;code>中断源-产生IRQ/FIQ信号&lt;/code>这段路, 关于处理IRQ/FIQ则是由CPU内部的&lt;em>异常模型&lt;/em>来完成.&lt;/p>
&lt;h2 id="对比-gicv2">对比 GICv2&lt;/h2>
&lt;ul>
&lt;li>支持更多的处理器, 用&lt;code>affinity routing&lt;/code> 方案来做中断路由.&lt;/li>
&lt;li>支持中断分组, 为了配合ARMv8的异常等级模型&lt;/li>
&lt;li>新增中断类型: SGI, 软件生成中断&lt;/li>
&lt;li>新增中断类型: SPI, Shared Peripheral Interrupts&lt;/li>
&lt;li>对于CPU interface的寄存器, 可直接使用系统寄存器接口(system register interface)来访问, 比memory-mapped的方式快.&lt;/li>
&lt;li>ITS, Interrupt Translation Service 暂不介绍&lt;/li>
&lt;li>LPI, Locality-specific Peripheral Interrupts . 暂不介绍&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>GICv3支持ARMv8-A或ARMv8-R系列处理器, 但没有必然的绑定关系. ARMv8-A也可以使用GICv2.&lt;/p>
&lt;/blockquote>
&lt;h2 id="中断类型">中断类型&lt;/h2>
&lt;h3 id="locality-specific-peripheral-interrupt-lpi">Locality-specific Peripheral Interrupt (LPI)&lt;/h3>
&lt;p>LPIs are always &lt;a href="https://en.wikipedia.org/wiki/Message_Signaled_Interrupts">message-based interrupts&lt;/a> interrupts. 这里不做介绍.&lt;a href="https://en.wikipedia.org/wiki/Message_Signaled_Interrupts">wiki&lt;/a>&lt;/p>
&lt;h3 id="private-peripheral-interrupt-ppi">Private Peripheral Interrupt (PPI)&lt;/h3>
&lt;p>PPI是路由到&lt;strong>单个CPU&lt;/strong>的外设中断, 不同的CPU可以使用相同的中断号. 例如, 所有CPU都可以使用中断号16表示私有的定时器中断.&lt;/p>
&lt;h3 id="shared-peripheral-interrupt-spi">Shared Peripheral Interrupt (SPI)&lt;/h3>
&lt;p>SPI是可路由到&lt;strong>一组CPU&lt;/strong>的外设中断, Distributor 负责SPI路由.&lt;/p>
&lt;h3 id="software-generated-interrupt-sgi">Software Generated Interrupt (SGI)&lt;/h3>
&lt;p>SGI是由某个CPU产生, 路由到系统中的一个或多个CPU, 通常用于处理器间通信.&lt;/p>
&lt;h2 id="gicv3-的组件">GICv3 的组件&lt;/h2>
&lt;p>GICv3架构由以下逻辑组件构成:&lt;/p>
&lt;ul>
&lt;li>A Distributor&lt;/li>
&lt;li>A Redistributor for each CPU&lt;/li>
&lt;li>A CPU interface for each CPU&lt;/li>
&lt;li>Interrupt Translation Service components (ITS). 可选, 暂不介绍&lt;/li>
&lt;/ul>
&lt;p>The Distributor, Redistributor 一起组成了 &lt;em>IRI(Interrupt Routing Infrastructure)&lt;/em>.&lt;/p>
&lt;p>&lt;img src="./IRI.png" alt="iri">{width=&amp;ldquo;10px&amp;rdquo;}&lt;/p>
&lt;h3 id="distributor">Distributor&lt;/h3>
&lt;p>控制SPI和SGI的路由. 对于 SPI, 提供了一下接口:&lt;/p>
&lt;ul>
&lt;li>启动/禁用 SPI&lt;/li>
&lt;li>设置 SPI 的优先级&lt;/li>
&lt;li>配置对于 SPI 的路由&lt;/li>
&lt;li>设置 SPI 的触发方式&lt;/li>
&lt;li>生成 message-based SPI&lt;/li>
&lt;li>为每个 SPI 分组&lt;/li>
&lt;li>控制 SPI 的 &lt;code>pending and active&lt;/code> 状态&lt;/li>
&lt;/ul>
&lt;p>对于&lt;code>Distributor&lt;/code>的大部分配置通过&lt;code>GICD_CTLR&lt;/code>实现. 包括:&lt;/p>
&lt;ul>
&lt;li>启用 Affinity routing&lt;/li>
&lt;li>禁用安全性&lt;/li>
&lt;li>中断分组的配置.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>关于Distributor 寄存器都含有 &lt;code>GICD_&lt;/code> 前缀, 通过 &lt;code>memory-mapped&lt;/code> 方式访问.&lt;/p>
&lt;/blockquote>
&lt;h3 id="redistributor">Redistributor&lt;/h3>
&lt;ul>
&lt;li>启动/禁用 SGI 和 PPI&lt;/li>
&lt;li>设置 SGI 和 PPI 的优先级&lt;/li>
&lt;li>设置 SGI 和 PPI 的触发方式&lt;/li>
&lt;li>为 SGI 和 PPI 分配组&lt;/li>
&lt;li>控制 SGI 和 PPI 的 &lt;code>pending&lt;/code> 状态和 &lt;code>active&lt;/code> 状态&lt;/li>
&lt;li>与之链接的 CPU 的电源管理.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>关于Redistributor 寄存器都含有 &lt;code>GICR_&lt;/code> 前缀, 通过 &lt;code>memory-mapped&lt;/code> 方式访问.&lt;/p>
&lt;/blockquote>
&lt;h3 id="cpu-interface">CPU interface&lt;/h3>
&lt;ul>
&lt;li>Acknowledge 一个中断&lt;/li>
&lt;li>执行 End Of Interrupt&lt;/li>
&lt;li>Deactivate 一个中断&lt;/li>
&lt;li>设置 CPU 的优先级Mask&lt;/li>
&lt;li>配置中断抢占&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>关于 CPU interface 寄存器是以 &lt;code>ICC_&lt;/code> 为前缀, 还有 &lt;code>ICV&lt;/code> for vitual interrupt, &lt;code>ICH&lt;/code> for hypervisor configuration.&lt;/p>
&lt;/blockquote>
&lt;h2 id="中断的状态转换">中断的状态转换&lt;/h2>
&lt;p>&lt;img src="./int-lifestyle.png" alt="">&lt;/p>
&lt;ol>
&lt;li>生成中断. 中断可能来自外部信号, 或者软件生成(SGI)&lt;/li>
&lt;li>Distribute. IRI 负责中断的分组, 优先级屏蔽等. 将合适的中断发送到CPU Interface.&lt;/li>
&lt;li>Deliver. CPU interface 将中断发送到连接的CPU.&lt;/li>
&lt;li>Activate. CPU读取IAR寄存器, 即发送ACK. 该中断的状态转为active.&lt;/li>
&lt;li>Priority drop. 处理程序结束之后, 写&lt;code>ICC_EOIR&lt;/code>寄存器, end of interrupt&lt;/li>
&lt;li>Deactivation. 写&lt;code>ICC_DIR&lt;/code>寄存器清除中断的active标志位. 一般来说, end of interrupt 和 deactivation 可配置成同时发生.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;code>ICC_CTLR_ELx.EOImode&lt;/code> 位控制是否 end of interrupt 同时导致 deactivation.&lt;/p>
&lt;p>❓ EOI 和 deactivated 分开进行暂时还不知道应用场景.&lt;/p>
&lt;/blockquote>
&lt;h2 id="中断id-intid">中断ID: INTID&lt;/h2>
&lt;p>INTID 是中断的标识符, 它的最大值是&lt;em>实现定义&lt;/em>的, 可以在&lt;code>GICD_TYPER.IDbits&lt;/code>中读取。&lt;/p>
&lt;p>INTID按照中断类型分类的, 对照表如下:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>INTID&lt;/th>
&lt;th>中断类型&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0-15&lt;/td>
&lt;td>SGI&lt;/td>
&lt;td>本地的, 不同CPU可使用同一中断号代表不同中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16-31&lt;/td>
&lt;td>PPI&lt;/td>
&lt;td>本地的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>32-1019&lt;/td>
&lt;td>SPI&lt;/td>
&lt;td>全局的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1020-1023&lt;/td>
&lt;td>特殊中断&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1056-1119&lt;/td>
&lt;td>扩展的PPI&lt;/td>
&lt;td>本地的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4096 – 5119&lt;/td>
&lt;td>扩展的SPI&lt;/td>
&lt;td>全局的&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="特殊中断号">特殊中断号&lt;/h3>
&lt;blockquote>
&lt;p>These INTIDs do not require an end of interrupt or deactivation.&lt;/p>
&lt;/blockquote>
&lt;p>1020:&lt;/p>
&lt;p>1021:&lt;/p>
&lt;p>1022:&lt;/p>
&lt;p>1023: 读&lt;code>ICC_IAR1_EL1&lt;/code> 返回该值表明当前的CPU上没有待处理的中断.&lt;/p>
&lt;h2 id="中断分组">中断分组&lt;/h2>
&lt;p>为了配合 ARMv8 的异常模型和安全模型, GICv3 支持为每个中断配置不同的组. 不同组的中断只能路由到特定的异常等级和安全状态进行处理.&lt;/p>
&lt;p>共包含三个分组: Gourp 0, Secure Group 1, Non-secure Group 1.&lt;/p>
&lt;ul>
&lt;li>Group 0的中断需要在EL3 处理.&lt;/li>
&lt;li>Secure Group1 的中断需要在 Secure EL1 或者 Secure EL2(如果启用了虚拟化)处理.&lt;/li>
&lt;li>Non-secure Group 1 的中断需要在 Non-secure EL2 or Non-secure EL1 if not using virtualization&lt;/li>
&lt;/ul>
&lt;p>同时, 中断位于哪个组也决定了其触发的是FIQ还是IRQ. 对于 AArch64 来说, 对应关系可见下表:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>当前异常等级&lt;/th>
&lt;th>Group 0 的中断&lt;/th>
&lt;th>Secure Group 1 的中断&lt;/th>
&lt;th>Non-secure Group 1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Secure EL1/0/2&lt;/td>
&lt;td>FIQ&lt;/td>
&lt;td>IRQ&lt;/td>
&lt;td>FIQ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Non-secure EL1/0/2&lt;/td>
&lt;td>FIQ&lt;/td>
&lt;td>FIQ&lt;/td>
&lt;td>IRQ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EL3&lt;/td>
&lt;td>FIQ&lt;/td>
&lt;td>FIQ&lt;/td>
&lt;td>FIQ&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Group 0 的中断, 需要在EL3处理, 其优先级较高, 所以均属于 FIQ&lt;/li>
&lt;/ul>
&lt;h2 id="中断路由">中断路由&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>PPIs are routed directly from the source to the local Redistributor .&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SPIs are routed from the source through the Distributor to the target Redistributor and the associated CPU interface.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SGIs are generated by software through the CPU interface and Redistributor. They are then routed through the Distributor to one or more target Redistributors and the associated CPU interfaces&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="what-is-affinity-routing">What is Affinity Routing?&lt;/h3>
&lt;p>Affinity routing 是一种基于地址的标识多个CPU的方法, 用于中断的路由. Affinity value 由4个8bit字段组成, 结构是&lt;code>aff3.aff2.aff1.aff0&lt;/code>.&lt;/p>
&lt;p>由于 PPI 的中断源是直连 Redistributor 的, 所以仅 SPI 和 SGI 可以使用 Affinity routing.&lt;/p>
&lt;ul>
&lt;li>对于 SPI, 目标CPU的 affinity value 通过&lt;code>GICD_IROUTER&amp;lt;n&amp;gt;&lt;/code> 设置.&lt;/li>
&lt;li>对于 SGI, 在生成时即可同时配置, 详见 &lt;code>ICC_SGI0R_EL1&lt;/code> 和 &lt;code>ICC_SGI1R_EL1&lt;/code>.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Aff3.Aff2.Aff1.Aff0 与 Aff3.Aff2.Aff2.TargetList&lt;/p>
&lt;p>对于SPI, 目标的CPU只能是一个, 故&lt;code>Aff0&lt;/code>表示该CPU的ID. 而SGI可以配置同时发给多个CPU, 所以&lt;code>TargetList&lt;/code>是基于位操作的, 每个位表示一个CPU.&lt;/p>
&lt;/blockquote>
&lt;h2 id="编程指导">编程指导&lt;/h2>
&lt;h3 id="初始化">初始化&lt;/h3>
&lt;p>由于 &lt;em>Distributor&lt;/em> 整个系统共享的, 所以必须在其他核启动之前, 由主核完成初始化. 然后当所有核都启动后, 各自完成各自 &lt;em>Redistributor&lt;/em> 和 &lt;em>CPU interface&lt;/em> 的初始化工作.&lt;/p>
- https://wangloo.github.io/posts/armv8/gicv3/ - @2019 Notepadium.</description></item><item><title>武器库: shell scripts</title><link>https://wangloo.github.io/posts/shell/shell-script/</link><pubDate>Wed, 20 Jul 2022 11:54:13 +0800</pubDate><guid>https://wangloo.github.io/posts/shell/shell-script/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/shell/shell-script/ -&lt;p>ℹ️ 以下命令/脚本的执行环境均为 &lt;code>bash&lt;/code>.&lt;/p>
&lt;h2 id="统计代码量">统计代码量&lt;/h2>
&lt;blockquote>
&lt;p>使用到的命令包含: find, wc, xargs, sort 等&lt;/p>
&lt;/blockquote>
&lt;p>列出&lt;em>所有的文件及其代码行数&lt;/em>, 只统计.c 和.h, 过滤&lt;code>./scripts&lt;/code>目录.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>find -name &lt;span style="color:#f1fa8c">&amp;#39;*.[c|h]&amp;#39;&lt;/span> ! -path &lt;span style="color:#f1fa8c">&amp;#39;./scripts/*&amp;#39;&lt;/span> | xargs wc -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>+将内容按照代码行数降序排列&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>find -name &lt;span style="color:#f1fa8c">&amp;#39;*.[c|h]&amp;#39;&lt;/span> ! -path &lt;span style="color:#f1fa8c">&amp;#39;./scripts/*&amp;#39;&lt;/span> | xargs wc -l | sort -rn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>若仅列出&lt;em>总的代码行数&lt;/em>, 去除&lt;strong>空行&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">(&lt;/span>find ./ -name &lt;span style="color:#f1fa8c">&amp;#39;*.[c|h]&amp;#39;&lt;/span> -print0 | xargs -0 cat&lt;span style="color:#ff79c6">)&lt;/span> | sed &lt;span style="color:#f1fa8c">&amp;#39;/^\s*$/d&amp;#39;&lt;/span> | wc -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除目录下所有的可执行文件">删除目录下所有的可执行文件&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>find . -maxdepth &lt;span style="color:#bd93f9">1&lt;/span> -executable -type f | xargs rm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="判断执行脚本时带的参数">判断执行脚本时带的参数&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$#&lt;/span> -ne &lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;ONE parameter is needed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">exit&lt;/span> -1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$1&lt;/span> &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;build&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># do something&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">elif&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$1&lt;/span> &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;run&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># do something&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">elif&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$1&lt;/span> &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;gdb&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># do something&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Not supported command&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自动拷贝文件到-sd-card">自动拷贝文件到 SD Card&lt;/h2>
&lt;blockquote>
&lt;p>TODO&lt;/p>
&lt;ol>
&lt;li>添加进度条&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">sd_path&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>find /media/&lt;span style="color:#8be9fd;font-style:italic">$USER&lt;/span> -maxdepth &lt;span style="color:#bd93f9">1&lt;/span> -type d -name &lt;span style="color:#f1fa8c">&amp;#34;*-*&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">while&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> ! -d &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">sd_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;waiting for inserting SD-Card&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;SD-Card is inserted&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp ./output/kernel/kernel.bin &lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">sd_path&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;Copy completely&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取所有文件信息可递归进入子目录">获取所有文件信息(可递归进入子目录)&lt;/h2>
&lt;p>获取&lt;code>dir&lt;/code>路径下的所有文件的信息, 这里获取的是文件的&lt;strong>完整路径&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>TODO&lt;/p>
&lt;ol>
&lt;li>操作数组下标的方式可能有待改进? &lt;code>filenum&lt;/code>感觉没必要, 暂时还不会改&lt;/li>
&lt;li>通过拼接获得文件信息(路径)的方式也有点怪异&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">dir&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">files&lt;/span>&lt;span style="color:#ff79c6">=()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">filenum&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> getfiles&lt;span style="color:#ff79c6">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> file in &lt;span style="color:#f1fa8c">`&lt;/span>ls &lt;span style="color:#8be9fd;font-style:italic">$dir&lt;/span>&lt;span style="color:#f1fa8c">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">[&lt;/span> -d &lt;span style="color:#8be9fd;font-style:italic">$file&lt;/span> &lt;span style="color:#ff79c6">]&lt;/span>; &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">cd&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getfiles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">cd&lt;/span> ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> files&lt;span style="color:#ff79c6">[&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$filenum&lt;/span>&lt;span style="color:#ff79c6">]=&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">pwd&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$file&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>/&lt;span style="color:#ff79c6">$(&lt;/span>basename &lt;span style="color:#8be9fd;font-style:italic">$file&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4"># echo file=$(pwd $file)/$(basename $file)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> filenum++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="带颜色的输出">带颜色的输出&lt;/h2>
&lt;p>使用&lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape code&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>Black 0;30 Dark Gray 1;30
Red 0;31 Light Red 1;31
Green 0;32 Light Green 1;32
Brown/Orange 0;33 Yellow 1;33
Blue 0;34 Light Blue 1;34
Purple 0;35 Light Purple 1;35
Cyan 0;36 Light Cyan 1;36
Light Gray 0;37 White 1;37
&lt;/code>&lt;/pre>&lt;p>Code example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">RED&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;\033[0;31m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">GREEN&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;\033[0;32m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">YELLOW&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;\033[1;33m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">BLUE&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;\033[0;34m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">CYAN&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;\033[0;36m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#39;\033[0m&amp;#39;&lt;/span> &lt;span style="color:#6272a4"># No Color&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> -e &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">YELLOW&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">HELLO, YELLOW&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> -e &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">GREEN&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">HELLO, GREEN&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> -e &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">RED&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">HELLO, RED&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> -e &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">BLUE&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">HELLO, BLUE&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> -e &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">CYAN&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">HELLO, CYAN&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">#########################################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># generic functions #####################################&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> ERROR&lt;span style="color:#ff79c6">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> -e &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">RED&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">[error] &lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$*&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">exit&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> INFO &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> -e &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">BLUE&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">[info] &lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$*&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> WARN &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> -e &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">YELLOW&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">[warn] &lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$*&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> LOG &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">echo&lt;/span> -e &lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">GREEN&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">[log] &lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$*&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">NC&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span> &amp;gt;&amp;gt; &lt;span style="color:#8be9fd;font-style:italic">$LOG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO &lt;span style="color:#f1fa8c">&amp;#34;This is an infomation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARN &lt;span style="color:#f1fa8c">&amp;#34;This is a log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>- https://wangloo.github.io/posts/shell/shell-script/ - @2019 Notepadium.</description></item><item><title>C 语言位操作技巧</title><link>https://wangloo.github.io/posts/c/bitops/</link><pubDate>Sun, 03 Jul 2022 09:44:13 +0800</pubDate><guid>https://wangloo.github.io/posts/c/bitops/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/c/bitops/ -&lt;h2 id="连续内存取n-bit">连续内存取n bit&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#include&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;assert.h&amp;gt;&lt;/span>&lt;span style="color:#ff79c6">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define bitmask(n) ((1ul &amp;lt;&amp;lt; (n)) - 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * 从ptr指向的内存开始，抽取第start个bit开始的连续n个bit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * 限制: n &amp;lt; 32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">uint32_t&lt;/span> &lt;span style="color:#50fa7b">extract_bits&lt;/span>(&lt;span style="color:#8be9fd">uint8_t&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>ptr, &lt;span style="color:#8be9fd">uint32_t&lt;/span> start, &lt;span style="color:#8be9fd">uint32_t&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> start_byte &lt;span style="color:#ff79c6">=&lt;/span> start &lt;span style="color:#ff79c6">/&lt;/span> &lt;span style="color:#bd93f9">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> start_offset &lt;span style="color:#ff79c6">=&lt;/span> start &lt;span style="color:#ff79c6">%&lt;/span> &lt;span style="color:#bd93f9">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>pstart &lt;span style="color:#ff79c6">=&lt;/span> (&lt;span style="color:#8be9fd">uint32_t&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>)(ptr &lt;span style="color:#ff79c6">+&lt;/span> start_byte);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> end &lt;span style="color:#ff79c6">=&lt;/span> start &lt;span style="color:#ff79c6">+&lt;/span> n &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> end_byte &lt;span style="color:#ff79c6">=&lt;/span> end &lt;span style="color:#ff79c6">/&lt;/span> &lt;span style="color:#bd93f9">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> end_offset &lt;span style="color:#ff79c6">=&lt;/span> end &lt;span style="color:#ff79c6">%&lt;/span> &lt;span style="color:#bd93f9">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>pend &lt;span style="color:#ff79c6">=&lt;/span> (&lt;span style="color:#8be9fd">uint32_t&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>)(ptr &lt;span style="color:#ff79c6">+&lt;/span> end_byte);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> data &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>pstart &lt;span style="color:#ff79c6">&amp;gt;&amp;gt;&lt;/span> start_offset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (n &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">32&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span> start_offset) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">/* 由于n &amp;lt; 32, 所以补齐*pend一定就够了，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * end_offset对齐到最后一位(n-1).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * 严谨性证明: n 一定&amp;gt; end_offset + 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * 因为n &amp;gt; 32-start_offset ==&amp;gt; n &amp;gt; 25,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * 且end_offset + 1 &amp;lt; 9, 故得证
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#ff79c6">|=&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>pend &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> (n &lt;span style="color:#ff79c6">-&lt;/span> end_offset &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> data &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> bitmask(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">void&lt;/span> &lt;span style="color:#50fa7b">test_val&lt;/span>(&lt;span style="color:#8be9fd">uint32_t&lt;/span> val, &lt;span style="color:#8be9fd">uint32_t&lt;/span> expect)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (val &lt;span style="color:#ff79c6">!=&lt;/span> expect) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;error: val: 0x%x, expect: 0x%x&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, val, expect);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(val &lt;span style="color:#ff79c6">==&lt;/span> expect);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>(&lt;span style="color:#8be9fd">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> vals[] &lt;span style="color:#ff79c6">=&lt;/span> {&lt;span style="color:#bd93f9">0x11223344&lt;/span>, &lt;span style="color:#bd93f9">0x11223344&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#ff79c6">=&lt;/span> extract_bits((&lt;span style="color:#8be9fd">uint8_t&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span>)vals, &lt;span style="color:#bd93f9">31&lt;/span>, &lt;span style="color:#bd93f9">30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test_val(ret, &lt;span style="color:#bd93f9">0x22446688&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;Test Passed!&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="一个数取连续n-bit">一个数取连续n bit&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * 从一个数中取第start个bit开始的连续n个bit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">uint32_t&lt;/span> &lt;span style="color:#50fa7b">extract_bits&lt;/span> (&lt;span style="color:#8be9fd">uint32_t&lt;/span> val, &lt;span style="color:#8be9fd">uint32_t&lt;/span> start, &lt;span style="color:#8be9fd">uint32_t&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> (val &lt;span style="color:#ff79c6">&amp;gt;&amp;gt;&lt;/span> start) &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> bitmask(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="判断一个数是否为2的幂">判断一个数是否为2的幂&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">unsigned&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> v;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> ((v &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> (v &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>)) &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;v is a power of 2&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;v is not a power of 2&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="统计一个数的二进制中1的数量">统计一个数的二进制中1的数量&lt;/h2>
&lt;p>依然是利用&lt;code>v &amp;amp; (v -1)&lt;/code>的运算结果会将v的最低位的&lt;code>1&lt;/code>(如果有的话)置&lt;code>0&lt;/code>.&lt;/p>
&lt;p>循环执行此操作就可统计v中&lt;code>1&lt;/code>的数量.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">numberof1&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> count &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">while&lt;/span>(v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count&lt;span style="color:#ff79c6">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v &lt;span style="color:#ff79c6">=&lt;/span> v &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> (v &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="将一个数向上取整为2的幂">将一个数向上取整为2的幂&lt;/h2>
&lt;p>用一个&lt;code>1&lt;/code>一直左移, 直到比这个数大为止.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">uint32_t&lt;/span> &lt;span style="color:#50fa7b">roundup_pow_of_two&lt;/span>(&lt;span style="color:#ff79c6">const&lt;/span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">uint32_t&lt;/span> ret &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> (ret &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#ff79c6">=&lt;/span> ret &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Linux内核中使用了一种更快的方案, amazing!!!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">static&lt;/span> __inline__ &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">generic_fls&lt;/span>(&lt;span style="color:#8be9fd">int&lt;/span> x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> r &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">32&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>(x &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> &lt;span style="color:#bd93f9">0xffff0000u&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">16&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">16&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>(x &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> &lt;span style="color:#bd93f9">0xff000000u&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>(x &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> &lt;span style="color:#bd93f9">0xf0000000u&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>(x &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> &lt;span style="color:#bd93f9">0xc0000000u&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#ff79c6">!&lt;/span>(x &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> &lt;span style="color:#bd93f9">0x80000000u&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>;&lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> r;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">static&lt;/span> &lt;span style="color:#ff79c6">inline&lt;/span> &lt;span style="color:#8be9fd">unsigned&lt;/span> &lt;span style="color:#8be9fd">long&lt;/span> __attribute_const__ &lt;span style="color:#50fa7b">roundup_pow_of_two&lt;/span>(&lt;span style="color:#8be9fd">unsigned&lt;/span> &lt;span style="color:#8be9fd">long&lt;/span> x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> (&lt;span style="color:#bd93f9">1UL&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> generic_fls(x &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="向上向下对齐-检查是否对齐">向上/向下对齐, 检查是否对齐&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">/* uintptr_t 代表指针的位数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> * 加uintptr_t转换的原因是: (void *)不能进行运算
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define IS_ALIGNED(X, align) (((uintptr_t)(const void *)(X)) % (align) == 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define ALIGN_UP(X, align) (((X) + ((align) - 1)) &amp;amp; ~((align) - 1))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define ALIGN_DOWN(x, align) ((X) &amp;amp; ~((align) - 1))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define X (0x12345675)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define align (1 &amp;lt;&amp;lt; 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> v &lt;span style="color:#ff79c6">=&lt;/span> IS_ALIGNED(X, align);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> (&lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">==&lt;/span> v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;Given X(0x%x) is not align to 0x%08x&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, X, align);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;After align up, new X = 0x%x&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, ALIGN_UP(X, align));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;After align down, new X = 0x%x&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, ALIGN_DOWN(X, align));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;Give X(0x%x) is aligned to 0x%08x&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, X, align);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;After align up, new X = 0x%x&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, ALIGN_UP(X, align));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;After align down, new X = 0x%x&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, ALIGN_DOWN(X, align));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="检查两个有符号数是否异号">检查两个有符号数是否异号&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd">int&lt;/span> x,y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> ((x &lt;span style="color:#ff79c6">^&lt;/span> y) &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;They have opposite signs&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#50fa7b">printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;They have same signs&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="大小端转换">大小端转换&lt;/h2>
&lt;p> &lt;/p>
&lt;h2 id="对某个位的getsetclear操作">对某个位的get/set/clear操作&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define GET_BIT(x, bit) ( ((x) &amp;amp; (1ULL &amp;lt;&amp;lt; (bit))) &amp;gt;&amp;gt; (bit) )
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define SET_BIT(x, bit) ( (x) |= (1ULL &amp;lt;&amp;lt; (bit)) )
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define CLEAR_BIT(x, bit) ( (x) &amp;amp;= ~(1ULL &amp;lt;&amp;lt; (bit)) )
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Release note:&lt;/p>
&lt;ol>
&lt;li>添加对&lt;code>unsigned long long&lt;/code>长度的支持&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p> &lt;/p>
&lt;h2 id="sign-extending-from-a-varaiable-bit-width">Sign extending from a varaiable bit-width&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd">int&lt;/span> bits &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">8&lt;/span>; &lt;span style="color:#6272a4">// number of bits representing the number in x
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> x &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0xFFC1&lt;/span>; &lt;span style="color:#6272a4">// ready to get sign-extended
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> rst; &lt;span style="color:#6272a4">// resulting sign-extended number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd">int&lt;/span> &lt;span style="color:#ff79c6">const&lt;/span> mask &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1U&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> (bits &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>); &lt;span style="color:#6272a4">// mask can be pre-computed if bits if fixed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff79c6">=&lt;/span> x &lt;span style="color:#ff79c6">&amp;amp;&lt;/span> ((&lt;span style="color:#bd93f9">1U&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&amp;lt;&lt;/span> bits) &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>); &lt;span style="color:#6272a4">// cut x if it holds more bits
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> rst &lt;span style="color:#ff79c6">=&lt;/span> (x &lt;span style="color:#ff79c6">^&lt;/span> mask) &lt;span style="color:#ff79c6">-&lt;/span> mask; &lt;span style="color:#6272a4">// excellent trick!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#f1fa8c">&amp;#34;INPUT: 0x%x, RESULT: 0x%x&lt;/span>&lt;span style="color:#f1fa8c">\n&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>, x, rst);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="字符字符数组的大小写转换">字符/字符数组的大小写转换&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define TO_LOWER(c) (unsigned char)((c &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;Z&amp;#39;) ? (c | 0x20) : c)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define TO_UPPER(c) (unsigned char)((c &amp;gt;= &amp;#39;a&amp;#39; &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;z&amp;#39;) ? (c &amp;amp; ~0x20) : c)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define TO_LOWER_STR(s, len) { \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6"> for (int i = 0; i &amp;lt; len &amp;amp;&amp;amp; s[i] != &amp;#39;\0&amp;#39;; i++) { \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6"> s[i] = TO_LOWER(s[i]); \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6"> } \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">#define TO_UPPER_STR(s, len) {\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6"> for (int i = 0; i &amp;lt; len &amp;amp;&amp;amp; s[i] != &amp;#39;\0&amp;#39;; i++) { \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6"> s[i] = TO_UPPER(s[i]); \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6"> } \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>- https://wangloo.github.io/posts/c/bitops/ - @2019 Notepadium.</description></item><item><title>Stack and Heap</title><link>https://wangloo.github.io/posts/os/stack-and-heap/</link><pubDate>Tue, 28 Jun 2022 16:41:54 +0800</pubDate><guid>https://wangloo.github.io/posts/os/stack-and-heap/</guid><description>Wangloo's BLOG https://wangloo.github.io/posts/os/stack-and-heap/ -&lt;p> &lt;/p>
&lt;h2 id="堆的含义">堆的含义&lt;/h2>
&lt;p>我们都知道&lt;code>malloc&lt;/code>动态申请的变量是存放在堆中. 所以相比栈来说, 堆是动态的.&lt;/p>
&lt;p>堆占据进程虚拟地址空间的大部分, 我们可能通过堆来申请&lt;code>1GB&lt;/code>的数组, 但是栈通常不行
, 大多也就几兆的空间.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="堆空间的管理">堆空间的管理&lt;/h2>
&lt;p>进程中堆空间的管理是&lt;code>运行库&lt;/code>负责的, 在Linux中是&lt;code>GLIBC&lt;/code>.&lt;/p>
&lt;p>运行库在初始化时会像操作系统申请一大块的堆空间, 再为每个进行分别分配需求. 当然,
如果某些程序的需求过大, 运行库也可以使用&lt;code>mmap&lt;/code>系统调用直接向操作系统申请, 然后
返回给用户进程.&lt;/p>
&lt;blockquote>
&lt;p>GLIBC的&lt;code>malloc&lt;/code>函数的处理方式是: 对于小于&lt;code>128KB&lt;/code>的申请, 会从运行库&amp;quot;批发的&amp;quot;堆空间
里分出一块来; 但若申请的空间过大, 则使用&lt;code>mmap&lt;/code>系统调用来创建匿名空间分配给用户.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Linux中虚拟地址块(VMA)的管理使用了红黑树, 可以用于运行库管理自己向操作系统
&amp;ldquo;批发&amp;quot;的堆空间. 使得用户程序动态申请和释放内存性能提高.&lt;/p>
&lt;/blockquote>
- https://wangloo.github.io/posts/os/stack-and-heap/ - @2019 Notepadium.</description></item></channel></rss>