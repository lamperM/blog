<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevTools on BLOG</title><link>https://wangloo.github.io/categories/devtools/</link><description>Recent content in DevTools on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 08 Apr 2024 15:28:12 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/categories/devtools/index.xml" rel="self" type="application/rss+xml"/><item><title>aptitude修复apt安装依赖</title><link>https://wangloo.github.io/posts/tools/apt_dep/</link><pubDate>Mon, 08 Apr 2024 15:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/apt_dep/</guid><description>Ubuntu 下用 apt 安装包出现依赖问题： 尝试加-f安装也仍然报相同错误。
在网上查到 aptitude 专用鱼解决 apt 依赖问题，遂尝试。
下载 aptitude
sudo apt install aptitude 用 aptitude 重新安装，aptitude 会给出几种解决方案，第一种是不安装，第二种是将依赖的软件降级消除依赖。我们显然选择第二种方案。
参考：解决Ubuntu下因依赖包而无法安装问题 - soarli博客</description></item><item><title>Vscode Snippets</title><link>https://wangloo.github.io/posts/tools/vscode/snippets/</link><pubDate>Sat, 06 Jan 2024 12:25:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/vscode/snippets/</guid><description>Snippets 的含义是代码片段，帮助我们快速补全一段代码。 今天发现这个功能还挺强大的，尤其是写 Markdown 时，关键字写起来麻烦， 加上 Vscode 补全还乱七八糟（代码块的自动匹配不能关闭）。 先解我燃眉之急，先介绍 Markdown 的 Snippest。
全局搜索中找到 snippets 的配置： 全局配置中选择 Insert 还能看到当前所有支持的 Snippets。
以下是我自己添加了一段与 Hugo notice 主题相关的，变量的运用比较关键。 $1 表示插入后光标所在的位置，$2，＄ 3&amp;hellip;依次是按 Tab 键之后的位置， $0 则表示最终将停在哪，不会继续循环。
{ // Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.</description></item><item><title>Vscode task.json &amp; launch.json</title><link>https://wangloo.github.io/posts/tools/vscode/task_launch/</link><pubDate>Sun, 17 Dec 2023 15:25:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/vscode/task_launch/</guid><description>Task.json Vscode中，可以为编译、打包等过程创建自动化任务，避免每次手动敲一些命令。 在我看来，Vscode Task就像是一个强大的、与Vscode联动的Shell脚本。
创建一个Task 创建一个Task很简答，Terminal-Configure Tasks， 然后根据引导就可以创建一个默认的task，对他进行配置的文件是workspace/.vscode/task.json。
展示一下我刚刚创建的一个编译并执行单元测试的任务，关键的参数是label也就是任务的名字， type除了shell不知道还有啥，command就是该任务会执行的shell命令。 更多的参数下面会介绍。
{ // See https://go.microsoft.com/fwlink/?LinkId=733558 // for the documentation about the tasks.json format &amp;#34;version&amp;#34;: &amp;#34;2.0.0&amp;#34;, &amp;#34;tasks&amp;#34;: [ { &amp;#34;label&amp;#34;: &amp;#34;build-ut&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;shell&amp;#34;, &amp;#34;command&amp;#34;: &amp;#34;bash tools/vscode_build_ut.sh&amp;#34;, &amp;#34;presentation&amp;#34;: { &amp;#34;echo&amp;#34;: true, &amp;#34;reveal&amp;#34;: &amp;#34;always&amp;#34;, &amp;#34;focus&amp;#34;: true, &amp;#34;panel&amp;#34;: &amp;#34;shared&amp;#34;, &amp;#34;showReuseMessage&amp;#34;: true, &amp;#34;clear&amp;#34;: false }, &amp;#34;problemMatcher&amp;#34;: [], } ] } 支持的参数 支持的参数很多，我主要介绍几个，Vscode的官方文档说的非常通俗易懂，修改参数时最好参考一下。
label: 此任务的名字 type：类型 shell：作为shell命令执行 process：创建一个新进程执行 command：任务实际执行的命令 group：任务的分组 presentation：定义如何处理Task的输出 reveal：终端是否显示 echo：任务输出是否到终端中 focus：任务执行时是否聚焦到终端 showReuseMessage：是否显示最后的提示信息 clear：任务运行前是否清理终端输出 options：定义当前目录和一些环境变量 runOptions：定义任务何时运行以及如何运行 problemMatcher: 自定义错误匹配机制，这个应该很强大，我这里单纯是为了运行时不需要再选一次所以用了一个默认值。具体怎么用可以参考: https://code.</description></item><item><title>Vim-YouCompleteMe插件国内安装</title><link>https://wangloo.github.io/posts/tools/vim/ycm/</link><pubDate>Fri, 17 Nov 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/vim/ycm/</guid><description>Vim插件YouCompleteMe国内安装 Update 2023/11/23: vim下现在我不用YCM了，换成Coc.nvim来进行代码补全。 不过在我看来其实没有特别明显的优势，所以YCM的配置注意事项还是留在这吧。
YCM 插件对 python, vim 的版本均有要求。
下载 可以使用 vim-plug 等工具下载, 也可以下载源码然后拷贝到.vim目录下
编译 编译用到 python3, 这里是问题最多的一步
# 编译并添加对C的提示支持 python3 install.py --clangd-completer --verbose Searching Python 3.8 libraries... ... Downloading Clangd from https://github.com/ycm-core/llvm/releases/download/13.0.0/clangd-13.0.0-x86_64-unknown-linux-gnu.tar.bz2... 使用--clangd-completer参数时, 脚本会去下载 clangd-14.0.0-x86_64-unknown-linux-gnu.tar.bz2 文件, 比较慢. 也可以提前根据提示的网站自己手动下载压缩包.
下载完成后, 放到本地目录下:
:~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/cache$ ls clangd-14.0.0-x86_64-unknown-linux-gnu.tar.bz2 还需对脚本YouCompleteMe/third_party/ycmd/build.py进行修改, 防止重新下载.
def DownloadClangd( printer ): ... MakeCleanDirectory( CLANGD_OUTPUT_DIR ) if not p.exists( CLANGD_CACHE_DIR ): os.makedirs( CLANGD_CACHE_DIR ) # 注释下面的语句 # elif p.exists( file_name ) and not CheckFileIntegrity( file_name, check_sum ): # printer( &amp;#39;Cached Clangd archive does not match checksum.</description></item><item><title>工具&amp;&amp;博客站点集合</title><link>https://wangloo.github.io/posts/tools/useful_sites/</link><pubDate>Sat, 05 Aug 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/useful_sites/</guid><description>博客站 向优秀的前辈们学习~
hitzhangjie
腾讯 一本有关Dwarf的gitbook: https://www.hitzhangjie.pro/debugger101.io/ Blog也是基于Hugo构建，风格很好，移动端体验不错。https://www.hitzhangjie.pro/blog/ stdcc
上海交大 IPADS Blog风格很好，https://stdrc.cc/ Slides一定得学习，https://stdrc.cc/slides/write-os-in-rust-2.0/slides.html 用notion整理表格 https://stdrc.notion.site/c93719166f094ac187dfba6fc199b566 &amp;hellip; 工具站 Armv8 寄存器、指令速查：http://hehezhou.cn/a64/ Emoji cheat sheet https://www.webfx.com/tools/emoji-cheat-sheet/ Windows10搭建局域网FTP服务器 跟我一起写Makefile https://seisman.github.io/how-to-write-makefile/Makefile.pdf 网络调试工具 http://free.cmsoft.cn/download/cmsoft/assistant/netassist5.0.3.zip Gnu gcc 内联汇编官方手册: https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C 交叉编译工具 Linaro: 经常用来编译armv7架构的一些项目。 https://releases.linaro.org/components/toolchain/binaries/
Gnu: https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads
目前我组织的ARM64项目都使用 aarch64-none-linux-gnu- 作为交叉编译工具集, 直达链接: https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz</description></item><item><title>开发环境构建指南</title><link>https://wangloo.github.io/posts/tools/dev_env/</link><pubDate>Mon, 17 Jul 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/dev_env/</guid><description>前言 写这篇博客的背景是我实在忍受不了每次换新的开发机器都得费好大的劲来完全恢复以前的环境， 而且，我平常喜欢搜集各种有用的工具、好看的主题，字体这些，如果零零散散的记录，大概率会忘记或者记不得某些细节。
所以，最后期望达到的是能够使我每次在新机器上搭建环境只需要看这一篇文章就可以了。因此这里会记录：
帮助提升开发效率的小工具 好看的字体、主题 配置某些环境的要点及注意事项 🥀 到目前为止，我还未发现一种方式能够完全达到“一键式布置”，这也不是本文的目的。 付出至少半天的时间的一定的，希望未来能发现一种好的方法。
字体 Fira Code 这款字体适合做编程字体，蛮好看的。我在 vscode 和 terminal 下都使用了这款字体。
详情及安装参考github
霞鹜文楷 开源的中文字体，做博客、PPT 不错。
详情及安装参考github
vscode vscode的所有配置通过其内置的sync功能实现, 目前用的是Github账号同步。
Command+Shift+o 或者搜索框中输入@ ==&amp;gt; 搜索outline 搜索框中输入% ==&amp;gt; 全局快速搜索quick search vscode多个窗口群组（Group）可以有两种排列方式：自由排布和放大某一个。 使用Toggle Editor Group Sizes命令来切换。
vscode常用快捷键 Remote SSH 连接失败 使用Remote SSH插件总是连接失败，但终端使用指令可以连接成功。这种情况下是插件挂了，解决方法参考链接：
VS Code Remote SSH Connection not working - Stack Overflow 删除服务器上的~/.vscode-server目录，并重试连接 Release 1.88.0 内置终端中按Ctrl+Alt+R执行历史命令。选择时按住Alt可以不自动执行 // #MARK：在minimap中标记region Quick search中按Command+⬆️/⬇️来在一次跳转文件 Ubuntu2004源 新版本的Clangd Clangd用15+才能用vscode的inlay hint功能。</description></item><item><title>Sed/Awk/Grep 三剑客</title><link>https://wangloo.github.io/posts/tools/sed_awk_grep/</link><pubDate>Tue, 03 Jan 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/sed_awk_grep/</guid><description>Sed Sed stands for Stream Editor.
Basic sed syntax:
sed [options] {sed-commands} {input-file} Sed reads one line at a time from the {input-file} and executes the {sed-commands} on that particular line
The input 并非必须是文件
echo &amp;quot;Some string&amp;quot; | sed '' 当然也是支持的.
Option: -n 通常sed是按照行来处理文本的, 然后打印处理后的结果. 然而并不是符合匹配的行被打印, 所有的行都会被打印. 例如sed 's/t/T/'会输出所有的行, 并且替换其中某些行的t.
这样的结果不是我们想见的(大多数情况下), 所以, 我们可以添加-n option 来 禁止自动打印所有内容, 例如sed -n 's/t/T/' 不会输出任何结果.
如果想要将匹配的结果单独打印, 则sed为我们提供了p命令. 例如, sed -n 's/t/T/p' 只会打印替换后的行.</description></item></channel></rss>