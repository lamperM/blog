<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>embedded on Soben's Secret Base</title><link>https://wangloo.github.io/categories/embedded/</link><description>Recent content in embedded on Soben's Secret Base</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>@2019 Notepadium.</copyright><lastBuildDate>Sat, 10 Sep 2022 21:51:49 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/categories/embedded/index.xml" rel="self" type="application/rss+xml"/><item><title>GICv3 - for ARMV8</title><link>https://wangloo.github.io/posts/armv8/gicv3/</link><pubDate>Sat, 10 Sep 2022 21:51:49 +0800</pubDate><guid>https://wangloo.github.io/posts/armv8/gicv3/</guid><description>GICV3(Generic Interrupt Controller - version 3) 关于GIC GIC即中断控制器, 负责管理中断的接收, 屏蔽, 路由等相关任务, 并向系统程序员提供配置的接口.
GIC与异常模型协作完成中断的整个生命周期, GIC主要负责中断源-产生IRQ/FIQ信号这段路, 关于处理IRQ/FIQ则是由CPU内部的异常模型来完成.
对比 GICv2 支持更多的处理器, 用affinity routing 方案来做中断路由. 支持中断分组, 为了配合ARMv8的异常等级模型 新增中断类型: SGI, 软件生成中断 新增中断类型: SPI, Shared Peripheral Interrupts 对于CPU interface的寄存器, 可直接使用系统寄存器接口(system register interface)来访问, 比memory-mapped的方式快. ITS, Interrupt Translation Service 暂不介绍 LPI, Locality-specific Peripheral Interrupts . 暂不介绍 GICv3支持ARMv8-A或ARMv8-R系列处理器, 但没有必然的绑定关系. ARMv8-A也可以使用GICv2.
中断类型 Locality-specific Peripheral Interrupt (LPI) LPIs are always message-based interrupts interrupts. 这里不做介绍.
Private Peripheral Interrupt (PPI) PPI是路由到单个CPU的外设中断, 不同的CPU可以使用相同的中断号.</description></item><item><title>A64 Instruction Set</title><link>https://wangloo.github.io/posts/armv8/a64_isa/</link><pubDate>Sat, 07 May 2022 21:19:01 +0800</pubDate><guid>https://wangloo.github.io/posts/armv8/a64_isa/</guid><description>Load/Store Addressing Addressing mode Base register - w0=[x1] ldr w0, [x1] Offset addressing mode - w0=[x1+12] ldr w0, [x1, 12] Pre-index addressing mode - x1+=12; w0=[x1] ldr w0, [x1, 12]! Post-index addressing mode - w0=[x1]; x1+=12 ldr w0, [x1], 12 Load/store instruction example // load a byte from x1 ldrb w0, [x1] // load a signed byte from x1 ldrsb w0, [x1] // store a 32-bit word to address in x1 str w0, [x1] // load two 32-bit words from stack, then add 8-byte to sp ldp w0, w1, [sp], 8 // store two 64-bit words at [sp-96] and subtract 96-byte from sp.</description></item><item><title>ARMv8-A Register</title><link>https://wangloo.github.io/posts/armv8/register/</link><pubDate>Sat, 07 May 2022 20:19:44 +0800</pubDate><guid>https://wangloo.github.io/posts/armv8/register/</guid><description>Classification General-purpose Register x0-x7 参数寄存器: Restore function parameters and return vaule. x9-x15 caller-saved 临时寄存器: callee 默认可以直接使用来保存临时变量, 不需要保存和恢复. 如果 caller 在里面存储了非临时信息, 那么在函数调用之前应当由 caller 负责保存. x19-x28 callee-saved 寄存器: callee 应该避免使用. 如果必须要使用，那么在返回前必须恢复. special registers: x8 restore indirect result. Commonly used when returning a struct. x18 platform reserved register. x29 frame pointer register(FP). x30 link register(LR). All general-purpose register xN is 64-bit width. They all have corresponding wN register using the lower 32-bit of xN.</description></item></channel></rss>