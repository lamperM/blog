<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Binary on BLOG</title><link>https://wangloo.github.io/categories/binary/</link><description>Recent content in Binary on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 14 Dec 2023 13:21:27 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/categories/binary/index.xml" rel="self" type="application/rss+xml"/><item><title>GNU 二进制工具集</title><link>https://wangloo.github.io/posts/binary/gnu_binutils/</link><pubDate>Thu, 14 Dec 2023 13:21:27 +0800</pubDate><guid>https://wangloo.github.io/posts/binary/gnu_binutils/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 输出 section header table readelf -S xxx.elf # 输出 program header table readelf -l xxx.elf # 输出 ELF header readelf -h xxx.elf # 输出 elf header，section header table，program header table(常用） readelf -e xxx.elf # 输出Elf中的所有符号(基于符号表非调试信息) nm xxx.elf readelf -s xxx.</description></item><item><title>Elf 加载器的工作流程</title><link>https://wangloo.github.io/posts/binary/elf_load/</link><pubDate>Fri, 24 Nov 2023 16:21:27 +0800</pubDate><guid>https://wangloo.github.io/posts/binary/elf_load/</guid><description>分析Elf文件 映射 Segments 对栈进行预处理 1 int main(int argc, char **argv, char **envp) {...} 见到一个main函数的定义，你是否考虑过:
main函数使用这些参数的作用分别是什么? Elf运行前，他们是如何被正确放置的? 我们又如何正确的访问? 内核中的Elf加载器还需要将辅助向量和其他信息(argc,argv,envp)一起放在栈上。 初始化后，进程的堆栈如下所示(64位架构下):
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 position content size (bytes) + comment ------------------------------------------------------------------------ [ free used for process ] stack pointer -&amp;gt; [ argc = number of args ] 8 [ argv[0] (pointer) ] 8 (program name) [ argv[1] (pointer) ] 8 [ argv[.</description></item><item><title>Elf 文件的链接与加载</title><link>https://wangloo.github.io/posts/binary/elf-format/</link><pubDate>Mon, 20 Jun 2022 16:21:27 +0800</pubDate><guid>https://wangloo.github.io/posts/binary/elf-format/</guid><description>ELF是什么 ELF（Executable Linkable Format）可执行文件格式不止是单指“可以被执行的文件”， 动态链接库、静态链接库都按照可执行文件格式来存储。
ELF标准里把采用ELF格式的文件分为四类：
Type description 实例 Relocatable File 这些文件包含了代码和data, 可以被用来链接成可执行文件或共享目标文件. .o, .a Executable File 直接可执行的文件 /bin/ls Shared Object File Including code and data. 链接器可将其与其他Relocatable File或Shared Object File结合, 生成新的目标文件. 动态链接器可将其与Executable File结合, 作为进程映像的一部分来运行. .so Core Dump File Restore critical infomation when process is terminated unexpectedly core dump 📌 file command in Linux can output the format of a file.</description></item></channel></rss>