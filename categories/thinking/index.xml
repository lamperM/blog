<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thinking on BLOG</title><link>https://wangloo.github.io/categories/thinking/</link><description>Recent content in Thinking on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 13 May 2024 19:30:35 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/categories/thinking/index.xml" rel="self" type="application/rss+xml"/><item><title>诗词笔记</title><link>https://wangloo.github.io/posts/thinking/poetry/</link><pubDate>Mon, 13 May 2024 19:30:35 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/poetry/</guid><description>长征 《清平乐·会昌》近现代·毛泽东
东方欲晓，莫道君行早。踏遍青山人未老，风景这边独好。会昌城外高峰，颠连直接东溟。战士指看南粤，更加郁郁葱葱。
1933年下半年蒋介石发动第五次“围剿”。中共此时听取国产国际而实行“御敌于国门之外”的错误方针，与敌硬拼，致使红军连吃败仗，毛泽东此时被雪藏。1934年4月，毛泽东在被冷遇三个月后，重新工作，前往中央苏区南部的会昌视察并指导工作，准备开展新的根据地。
哪怕是在这种情境下，我们还是能从这首词中读出一种乐观、积极的态度。
李白 使寰区大定，海县清一。是李白的政治抱负。
李白当时在唐玄宗手下做待诏翰林， “但用东山谢安石，为君谈笑静胡沙。”《永王东巡歌十一首》。 我李白就是像东山谢安那样的人物，你只要好好的任用我，千秋大业唾手可得。
.notice { --root-color: #444; --root-background: #eff; --title-color: #fff; --title-background: #7bd; --warning-title: #c33; --warning-content: #fee; --info-title: #fb7; --info-content: #fec; --note-title: #6be; --note-content: #e7f2fa; --tip-title: #5a5; --tip-content: #efe } @media (prefers-color-scheme:dark) { .notice { --root-color: #ddd; --root-background: #eff; --title-color: #fff; --title-background: #7bd; --warning-title: #800; --warning-content: #400; --info-title: #a50; --info-content: #420; --note-title: #069; --note-content: #023; --tip-title: #363; --tip-content: #121 } } body.</description></item><item><title>优秀文章阅读</title><link>https://wangloo.github.io/posts/thinking/post_reading/</link><pubDate>Thu, 01 Feb 2024 10:00:35 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/post_reading/</guid><description>Cache 伪共享 原地址：Cache伪共享
Cache的操作单位是CacheLine。 当两块内存AB位于同一个CacheLine时，且有两个Cpu核心分别对AB有修改需求， 此时AB都各自被加载到两个Core的Cache中。
伪共享指的是：若其中一个Core对AB进行修改，那另一个Core内的值变不可信， 需要根据一致性协议做出调整（文中举了MESI为例）， 使得两边内容一致。如果两边修改的比较频繁，就会导致一致动作经常发生， 这消耗的时间好似没有Cache存在，具体的时间损耗依据使用的一致性协议决定。</description></item><item><title>2023总结</title><link>https://wangloo.github.io/posts/thinking/2023/</link><pubDate>Wed, 31 Jan 2024 21:30:35 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/2023/</guid><description>今天刚回东乔老家，也算是折腾收拾了一天。转眼间一年时光已逝， 期间辗转腾挪了四个城市，多多少少也算有一些感悟， 故在此作以记录并对即将到来的2024做出展望。
实习 到了4月份，听到同学们陆陆续续找实习的声音，自己也打算去寻找一份实习。 因为头一次经验不足，投递的时间相对较晚，可能错过了不少好的机会。 最后流程比较长的只有Oppo、华为、特斯拉三家公司， Oppo JD是做基于安卓的Os底层开发，特斯拉车机Os开发， 最终选择了Hr是学长的华为作为主攻方向，当时听说方向还比较匹配。 其中的经历比较坎坷，华为Hr的经典话术：你很匹配，部门很想要-&amp;gt; 卡在公司审批，还需要等等。好在是最终第二批审批通过了， 其实到这已经对华为的招聘流程有些反感了，但毕竟是第一次进入大公司工作， 还是充满了期待，希望能了解华为的开发及项目管理流程， 能为华为的项目贡献自己绵薄之力，也算增加一点成就感。
当天入职遇到了同组的另一位实习生同学：东坡。了解过后发现他之前是做安卓开发， 居然分配我做同样的工作。当时就在想，华为难道不按照个人能力方向进行筛选匹配吗？
事实来看确实如此，依赖于完整的培训体系，华为不指望你进来有什么业务能力， 甚至是该领域完全的小白也Ok，因为初期给你分配的工作都比较简单， 不仅实习生如此，就连校招生进我所在的“芯片仿真组”之前，都不是所在专业的毕业生。
开发工作中的所见所闻也印证了我的观点，我们组的工作是为海思芯片在Qemu上构建仿真平台， 尽可能去模拟所有的寄存器和外设。即便是Hr（目前已经是PL）学长一遍遍的强调我们是核心团队， 在我自己看来这些工作怎么也称不上核心两个字。更何况在工作时偶然间听到小道消息： 这块工作原本是由海思负责完成的，后面海思懒得做，划到了无线下。 在实际工作中我们也和海思需要频繁的拉通对齐，虽然海思不咋愿意搭理我们， 也不想提供涉密资料。在结合我们团队成员普遍在芯片行业的水平， 到底是不是核心团队则不言而喻了。
另外中间比较有意思的一件事是评选优秀实习生，在我们整个小部门有两个实习生： 我和东坡。在这里我不是想自夸，只是说明术业有专攻，在底层软件开发、嵌入式领域我好歹也做了5年至少了， 没想到头衔竟然授予东坡。当然，东坡在自己的学习领域也很优秀我承认， 但是我确实没想到一个从没接触过嵌入式的本科生能比我更有竞争力。 由此我只能得出一个结论：部门或者团队的任务中，不需要你有多NB的嵌入式、芯片知识，99%用不到！ 招你一个硕士的成本比一个本科生大多了，人家也能完成这项工作。 有点意思，这是我最后没选择加入华为的关键原因吧。 和嫉妒真的无关，如果一个专业能力比我强的人，但是这套规则我确实理解不了。
最终校招虽然没能加入华为，但是我想说，我很感谢这段经历。 虽然对工作内容本身有些无聊，但是同组几乎所有的同事都很好相处，与人友善。 大家毕竟在一起工作了三个多月，说没有感情是不可能的，回想起来挺想他们的：
感谢导师宁宁，对我接手新工作的指导，每次问他问题都能准确、通俗易懂的给予解答。 和宁宁聊天有种轻松愉快的感觉，在未来职业规划上给了我许多很有帮助的建议。 感谢组长PL余黎青，组长给我的感觉就是稳重、温文尔雅。让我印象很深刻的是生病时特地 加微信询问身体状况。 感谢吕东坡、罗鑫、郭绍兴，我们四人组天天一起吃饭，一起出去玩， 一起吐槽开发中遇到的各种问题。说到这，后面你们请我吃了两顿饭， 等我到上海一定安排你们！ 感谢芯片仿真组的其他同事们，徐老师、原湛、文栋&amp;hellip; 在我走之前也有幸参加了两次组内和部门的团建活动，部门的氛围真的很不错。 现在也遗憾如果岗位、工作内容合适就好了，不过天下哪有十全十美的事情呢？ 如果我可以定居上海，选择在华为干一辈子也未尝不可， 但问题在于我是一个注定要回家的游子，在华为短暂的技术成长确实较其他公司差些。 唉，真心希望仿真组的同事们能够越来越好。
秋招 大概从7月份开始，就在陆陆续续投递简历，最初并没有太多的消息。 大约在8、9月份的时候感觉好像到达了人生低谷，最自己产生了极大的怀疑。 没遇到合适的公司、岗位和地点。期间在海投但鲜有回复， 因为是偏硬件的底层软件/嵌入式方向，看到传统软件开发方向上的朋友们大批收获着笔试/面试自己不急是假的。一直到10月中旬签署第一个Offer心情才舒缓一些， 12月份又签下理想汽车标志我秋招过程结束。
整个秋招中，令我感触最深的是**战线太长！！**不同公司开始流程的时间段差别太大，早点的像希奥端、中兴微电子都是在8月份左右就开始面试， 而理想汽车确到10月份才进行笔试，11月才开启面试。 令你不得不重复的花时间准备笔试、面试。说起来这半年好像心思都在秋招上， 像在心中的一块石头没有落地。
秋招中一共收获了：希奥端、中兴微电子、中兴、极氪汽车、理想汽车这五个公司的Offer。
希奥端是最先给我Offer的公司，公司的业务是制造提供Arm服务器Cpu。 应聘的岗位是嵌入式软件工程师（OS方向），最终给出的薪资待遇是2415+1.212。面试的内容比较基础， 因为是初创公司，又是第一年招聘应届生，我心里感觉不是非常靠谱。 犹豫再三，接着A25K被拒接的接口拒绝了他们。 中兴微电子同为Arm服务器Cpu解决方案方向，细节应该是性能优化一类。 地点在南京，但工资非常低（18k），差太多也没A就拒了。 中兴公司是成都的OS部门，是陈阔师哥给推荐的，我们组去年有四位师哥在里面。听他们说做的内容还可以，因为与中兴微电子可以有冲突导致谈薪时间一拖再拖就放弃了。当时已经和极氪的Hr谈好了，预估的参考薪资是25*15，属于SSP级别。我个人不喜欢成都，离家太远本身也不是非常想去。 极氪汽车是我第一个签正式三方的公司，岗位是嵌入式软件开发，做的内容应该是车机OS虚拟化这一块。令我印象深刻的是一面面试官对我的肯定，让我后面重新拾回了信心。当时确实正属于过程中还最焦虑的一段时间，感谢极氪也对不起极氪。极氪给出的薪资是24*14，虽然不是很高但已经在这个岗位上算是SSP了。很遗憾最终没有选择极氪， 理想汽车是最晚发的Offer，也是工资开的最高的一个35*14，地点是上海，工作内容是操作系统虚拟化。可以说各个方面都比较符合我的预期，可以说的比较幸运吧，感谢上天的可怜。 情感 2023年是感情及其平淡的一年，与wqq保持着不温不火的关系。 缘由是去年过年时大吵了一架导致我积攒在心中已久的怨恨爆发， 我觉得她不够成熟，总是去计较一些莫须有的事情，让我很累。</description></item><item><title>杂乱的开发日记</title><link>https://wangloo.github.io/posts/thinking/dev_note/</link><pubDate>Sun, 17 Dec 2023 17:19:44 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/dev_note/</guid><description>零零碎碎的开发笔记，如果思考比较多应该写成单独的博文。
6.828 还能这么拷贝代码 将一段汇编代码从一个地址拷贝到另一个地址，你会怎么做？
我能想到的是利用链接脚本，将该段代码限定在某个段里，然后利用变量来定位代码所在的地址，执行拷贝。
init.c的boot_aps()提供了一种新的思路：在代码的前后定义一个全局变量，就能在外面访问到代码的地址和范围了。
转换函数的一种写法 我们经常会用到两种指代之间的转换，比如用id找到结构体指针（JOS中的envid2env），你会怎么设置函数的参数和返回值？
我以前只能想到：
struct Env *envid2env(envid_t envid) 正常情况下返回转换完成的结构体指针，否则返回NULL。
然而，JOS提供了一种别样的实现方式：
int envid2env(envid_t envid, struct Env **env_store, bool checkperm) { struct Env *e; // If envid is zero, return the current environment. if (envid == 0) { *env_store = curenv; return 0; } e = &amp;amp;envs[ENVX(envid)]; if (e-&amp;gt;env_status == ENV_FREE || e-&amp;gt;env_id != envid) { *env_store = 0; return -E_BAD_ENV; } if (checkperm &amp;amp;&amp;amp; e !</description></item><item><title>Thinking: Config Linux Network</title><link>https://wangloo.github.io/posts/thinking/cfg_linux_ip/</link><pubDate>Fri, 08 Dec 2023 17:19:44 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/cfg_linux_ip/</guid><description>起因：今天与一位同学一起尝试去配置Linux静态IP，这中间有不少坎坷，想简单把思考的过程写下来， 复盘一下是不是应该有可以更快的定位到问题并解决的方案。
提出问题 Cl同学想要达到启动Linux后自动设置某个静态Ip的效果， 在我的理解里这并不是一件很复杂的事。
他给我的想法是在Kernel Command Line参数中指定Ip， 我之前没有看到过这种方式配网，但是网上搜了一下确实有这样的例子。 所以他目前已经完成的是:
Linux是通过Uboot起的，要增加Linux Command Line， 可能是在Uboot的bootargs中添加。 但是他在修改完bootargs并重启的时候，发现变量没有成功赋值， 即使已经成功saveenv。所以就邀请我和他一起讨论。
动手实践 了解到问题之后，我先说出了我的想法：
配置静态Ip这个事其实我第一时间想到的是以前修改/etc/network/interfaces文件的方式 但是我愿意陪他先看下为什么命令行参数没有配置上去 这是两条路，因为他的系统里没有真正的文件系统，而是initrd， 所以我提出的方案需要去解包inird的压缩文件，还是尽量先去研究为什么命令行参数没有配置上去。
为什么CMDLINE没有配置上去呢? 首先它说bootargs没有保存成功，这个我也不知道为啥， 可以先不管，即便在每次启动之前在Uboot里设置了Bootargs， 他说在启动之后Kernel的打印也没有输出配置的项目。
Uboot中Bootargs设置的值是和Kernel Command Line配套吗？ 这个我反正是不太确定。
好，那能不能通过别的方式来设置CmdLine呢？ 我们搜索找到了两种方式：
Dts中 Menuconfig中修改 没有尝试Menuconfig是因为他说“目前Menuconfig配置的CmdLine为空， 但是实际Kernel启动后又是有值输出的，那么说明肯定是其他的地方有添加。” 对于这句话我也表示认同，Menuconfig里给的说明是：“默认配置”， 所以即便添加了也无法保证会不会被其他的给冲刷掉。所以，一个根本问题就是： CmdLine配置的顺序，或者说优先级是什么？
先去Dts里改改试试吧，找到了一个chosen结点有关于bootargs的配置， 不管怎么样改了一下，发现并没有生效，和最终Kernel输出的对不上。
所以，看起来修改CmdLine这条路要失败了，只能去修改initrd试试。
修改Initrd达到目的 initrd是打包好的，用的是cpio+lz4的方式。要修改首先要把他解开， 解开到还好说，网上能搜得到命令。 但是重新压缩回去问题很多，前期我就想到了我在华为实习时期遇到的类似的问题， 压缩的算法不对、打包的版本差异都会导致Kernel无法解析重新打包的initrd而panic。
实际也遇到了这个问题，但是这有个小插曲：即便是换回原来的initrd也还是panic。 最终破案是因为需要make clean之后重新make，猜测可能是用了什么中间文件。 不得不感慨Linux Kernel的构建还是相当复杂的。
问题来了：修改/etc/network/interfaces并没有改变静态Ip， 这就使我产生了疑惑，想着可以先在系统启动之后修改试试嘛， 执行ip down和ipup发现确实没有成功修改，这不禁让我想问为什么？
此时，我们突然想到一个问题，既然shell命令能成功修改Ip， 那么就在启动时增加一个脚本去执行设置Ip的行动，不就行了吗？
确实是可以的，所以暂时先不管为什么interfaces不生效。 那就修改有关于/etc/init.d和/etc/inittab相关的知识了， 这一部分我就没参与了，网上的资料的非常全，最终是成功达到目的。
感慨 虽然成功达到了目的，但是消耗了4个小时左右的时间，我觉得这件事并不应该这么复杂。 主要原因是Linux可以配置网络的方式太多了，以至于像我们这种不是非常熟悉的人一时间不知道如何下手。</description></item></channel></rss>