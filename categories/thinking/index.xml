<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thinking on BLOG</title><link>https://wangloo.github.io/categories/thinking/</link><description>Recent content in Thinking on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 17 Dec 2023 17:19:44 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/categories/thinking/index.xml" rel="self" type="application/rss+xml"/><item><title>一些胡思乱想</title><link>https://wangloo.github.io/posts/thinking/growth/</link><pubDate>Sun, 17 Dec 2023 17:19:44 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/growth/</guid><description>感谢室友 2024年1月1日
最近这段时间（半年左右）对诗词有不小的兴趣，尤其经常通过看阿帅的直播来长知识， 在成都那阵就自己在房间里看，去上海也是在自己房间里。就这次实习结束之后在宿舍放了台电脑， 这下大部分时候是下班回去在宿舍里看，因为舍友也经常在桌子上用电脑， 所以很多时候我外放的直播或者视频他也会听着，时不时互动一下。
为什么我会选择外放呢？其实我也想过也观察过，我舍友这个人呢比较直， 一般想什么就会说什么，说实话大部分时候和他聊天也会聊不到一块去， 经常就是话不投机半句多。这种性格呢其实适合讨论一些专门的问题， 不管是专业方面还是诗词方面，讨论问题就是讨论问题，他不会想其他的方面， 专注于这个问题本身了。而且感觉他对诗词也是有一些兴趣的， 可能也不算是兴趣吧，至少不讨厌它，所以遇到想不起来的诗词问他， 还是讨论一些历史背景都是挺有趣的，感觉找到了他的“正确使用方式”。
还有我发现，有人愿意陪伴你一起看，比你自己看更加有趣， 而且也会帮助你坚持看下去。可惜，光阴似箭， 还有半年就要毕业了，我却刚刚发现这一点。
感谢姐夫 在我刚上初中的时候，我姐毕业在青岛差不多稳定了下来，于是我放假便经常去青岛找她玩。 不久，我姐姐与我姐夫相识，姐夫对我不错，除了请我吃喝玩乐以外， 我现在想起仍然感慨万分的是：他帮助我建立厚脸皮、外向的性格。
其实在此之前我是一个非常内向的人，也是大家口中的乖孩子， 跟圆滑、变通这些词毫无关系，而每当我在青岛的时候，我姐夫便以身作则， 给我展示一个小老板是如何圆滑处事，偶尔也让我开口去和外人交流。 我始终觉得就是这一段段时间，一件件事的影响和磨练，使我现在变得不那么自卑和内向。 面向陌生人也能大大方方的交流，起码不使人尴尬吧。
这个点我的父母，甚至我的姐姐应该很难观察到，他们估计觉得姐夫就是带我玩而已， 而我自己将永远铭记在心。
胶片风格摄影爆火 2023年08月20日
富士的价格为什么被炒的越来越高？如果单说是外观，那尼康的zfc、索尼、佳能的一些微单并不输给他很多， 我觉得其中有一个很重要的原因就是富士的胶片模拟风格。
作为一个程序员，我当然知道这些都是软件层面的东西， 其他厂家如果想做是完全可以做的，可能他们对这块也没什么兴趣。不得不承认富士可能在这方面做了一些 功夫，很可能并不单单只是颜色调整而已，它对于高光部分有更加细致的处理。
今天主要想说的是为什么这种古老的风格会再次风靡？，如今数码时代的进步使得一张照片的清晰度、还原真实诚程度飙升， 为何还要去追求这种模糊与做旧呢？这是审美的倒退吗？
我觉得，我们对美的认识或者说定义并不是随着科技的进步而进步的，有一些东西是不需要创新或者说无法进行创新的， 老的、旧的并不一定就差于现代的，衡量美的标准可能就是如此。
那么我就想，其他东西是否也会这样呢？是否在过了几十年几百年的发展之后，我们回过头来再看，还不如原来固有的。 我想中华文化就在这之列，我们盲目的学习西方追求自由、绝对的平等，我相信时间会证明这不是适合中国人的社会风气。</description></item><item><title>杂乱的开发日记</title><link>https://wangloo.github.io/posts/thinking/dev_note/</link><pubDate>Sun, 17 Dec 2023 17:19:44 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/dev_note/</guid><description>零零碎碎的开发笔记，如果思考比较多应该写成单独的博文。
spring OS 2023-07-01 如果kernel也用低地址， 其实是不行的，因为这样在切换到用户 进程的时候，需要切页表对吧。 但是切换之后用户进程的ttbr是 没有内核的页面映射的。 它们又都用了用一个页表。
所以说看来是还是需要用两个页表实现起来比较方便些， 让内核用ttbr1，即映射在高地址。 做法是：
首先boot阶段的代码是要在低地址的，因为此时没有开mmu（用uboot+PIC就没有这个顾虑）。 在boot代码中，mmu开启前需要建立映射，除了映射内核的代码段、数据段之外。 还有一个很重要的是恒等映射ttbr0，需要将boot代码建立恒等映射。 等到mmu启动后，访问的还是boot的代码，这时恒等映射生效。 但是当跳转到内核的代码时， 因为VMA是高地址， 所以用ttbr1，之前就映射好了。可以直接访问的。 2023-07-02 task_init():
task-&amp;gt;affinity = -1
如果不是内核任务, 默认情况下task-&amp;gt;state = TASK_STATE_WAIT_EVENT, 在create hook中进行的 内核任务的话, task-&amp;gt;state = TASK_STATE_SUSPEND, 在task_init()中进行的
除了idle外, 其他task的task-&amp;gt;cpu = -1, 在task_init()中进行的
wakeup_common(): task-&amp;gt;task = TASK_STATE_WAKING task-&amp;gt;pend_stat = pend_state
task_ready():
更新task-&amp;gt;cpu, 如果初始值是-1, 更新为NR_CPUS-1, 这是TBD, 否则是affinity 然后根据当前cpu是否为task-&amp;gt;cpu, 做出判断: 如果是, 那么直接调用add_task_to_ready_list() 将任务加到readylist中 否则,将任务加到new_list, 而不是readylist, 然后发送核间中断通知task-&amp;gt;cpu sched_tick_handler():</description></item><item><title>Thinking: Config Linux Network</title><link>https://wangloo.github.io/posts/thinking/cfg_linux_ip/</link><pubDate>Fri, 08 Dec 2023 17:19:44 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/cfg_linux_ip/</guid><description>起因：今天与一位同学一起尝试去配置Linux静态IP，这中间有不少坎坷，想简单把思考的过程写下来， 复盘一下是不是应该有可以更快的定位到问题并解决的方案。
提出问题 Cl同学想要达到启动Linux后自动设置某个静态Ip的效果， 在我的理解里这并不是一件很复杂的事。
他给我的想法是在Kernel Command Line参数中指定Ip， 我之前没有看到过这种方式配网，但是网上搜了一下确实有这样的例子。 所以他目前已经完成的是:
Linux是通过Uboot起的，要增加Linux Command Line， 可能是在Uboot的bootargs中添加。 但是他在修改完bootargs并重启的时候，发现变量没有成功赋值， 即使已经成功saveenv。所以就邀请我和他一起讨论。
动手实践 了解到问题之后，我先说出了我的想法：
配置静态Ip这个事其实我第一时间想到的是以前修改/etc/network/interfaces文件的方式 但是我愿意陪他先看下为什么命令行参数没有配置上去 这是两条路，因为他的系统里没有真正的文件系统，而是initrd， 所以我提出的方案需要去解包inird的压缩文件，还是尽量先去研究为什么命令行参数没有配置上去。
为什么CMDLINE没有配置上去呢? 首先它说bootargs没有保存成功，这个我也不知道为啥， 可以先不管，即便在每次启动之前在Uboot里设置了Bootargs， 他说在启动之后Kernel的打印也没有输出配置的项目。
Uboot中Bootargs设置的值是和Kernel Command Line配套吗？ 这个我反正是不太确定。
好，那能不能通过别的方式来设置CmdLine呢？ 我们搜索找到了两种方式：
Dts中 Menuconfig中修改 没有尝试Menuconfig是因为他说“目前Menuconfig配置的CmdLine为空， 但是实际Kernel启动后又是有值输出的，那么说明肯定是其他的地方有添加。” 对于这句话我也表示认同，Menuconfig里给的说明是：“默认配置”， 所以即便添加了也无法保证会不会被其他的给冲刷掉。所以，一个根本问题就是： CmdLine配置的顺序，或者说优先级是什么？
先去Dts里改改试试吧，找到了一个chosen结点有关于bootargs的配置， 不管怎么样改了一下，发现并没有生效，和最终Kernel输出的对不上。
所以，看起来修改CmdLine这条路要失败了，只能去修改initrd试试。
修改Initrd达到目的 initrd是打包好的，用的是cpio+lz4的方式。要修改首先要把他解开， 解开到还好说，网上能搜得到命令。 但是重新压缩回去问题很多，前期我就想到了我在华为实习时期遇到的类似的问题， 压缩的算法不对、打包的版本差异都会导致Kernel无法解析重新打包的initrd而panic。
实际也遇到了这个问题，但是这有个小插曲：即便是换回原来的initrd也还是panic。 最终破案是因为需要make clean之后重新make，猜测可能是用了什么中间文件。 不得不感慨Linux Kernel的构建还是相当复杂的。
问题来了：修改/etc/network/interfaces并没有改变静态Ip， 这就使我产生了疑惑，想着可以先在系统启动之后修改试试嘛， 执行ip down和ipup发现确实没有成功修改，这不禁让我想问为什么？
此时，我们突然想到一个问题，既然shell命令能成功修改Ip， 那么就在启动时增加一个脚本去执行设置Ip的行动，不就行了吗？
确实是可以的，所以暂时先不管为什么interfaces不生效。 那就修改有关于/etc/init.d和/etc/inittab相关的知识了， 这一部分我就没参与了，网上的资料的非常全，最终是成功达到目的。
感慨 虽然成功达到了目的，但是消耗了4个小时左右的时间，我觉得这件事并不应该这么复杂。 主要原因是Linux可以配置网络的方式太多了，以至于像我们这种不是非常熟悉的人一时间不知道如何下手。</description></item></channel></rss>