<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Course on BLOG</title><link>https://wangloo.github.io/categories/course/</link><description>Recent content in Course on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 16 Apr 2024 19:28:12 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/categories/course/index.xml" rel="self" type="application/rss+xml"/><item><title>课程笔记：NJU ICS2022</title><link>https://wangloo.github.io/posts/course/nju-ics2022/</link><pubDate>Tue, 16 Apr 2024 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/course/nju-ics2022/</guid><description>ISA: RISCV32
编译一个客户程序 内存布局 貌似所有的格式，所有的平台都使用同一个链接脚本。
栈空间在ELF中预留，好处是统一，缺点是增加了ELF的大小。 bss跟在数据段后面，导致数据段的filesz和memsz可能不同。NanOS是加载APP的时候，load segment时直接清零，而不是需要单独遍历一下bss，更加方便。 ENTRY(_start) PHDRS { text PT_LOAD; data PT_LOAD; } SECTIONS { /* _pmem_start and _entry_offset are defined in LDFLAGS */ . = _pmem_start + _entry_offset; .text : { *(entry) *(.text*) } : text etext = .; _etext = .; .rodata : { *(.rodata*) } .data : { *(.data) } : data edata = .; _data = .; .bss : { /* bss段跟在.</description></item><item><title>课程笔记：cs152（计算机体系结构）</title><link>https://wangloo.github.io/posts/course/cs152/</link><pubDate>Fri, 05 Apr 2024 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/course/cs152/</guid><description>CISC 的发展到 RISC 诞生 1940-1950 冯诺依曼架构被提出：以存储器为中心，软件和硬件的设计分离，减少了系统中的硬连接，实现了可编程的计算机！ 用户程序（二进制指令）被存储到存储器中。存储器的容量，几 k 字，不能放下很大的程序。 存储器有 CRT 磷光线存储器（支持随机存储），磁芯（Core memory）（磁芯存储：统治存储领域 20 年 - 知乎）。 1960-1970 PDP-6 典型设计，16 个通用寄存器，SP+FP，ISA 逐渐变得复杂 此时人们用汇编指令写程序，认为每个常见操作都应该实现为一条特殊的指令（三角函数、CRC&amp;hellip;）。（？？？与 ROM 和 RAM 的速度差异有关吗） 这么多种类的指令硬连线的方式太复杂 ==&amp;gt; 微码 微码 ROM 是一张表：ISA 指令和微操作之间的映射，一条指令对应多个微操作 有了微码，创造一条新的指令很容易，使用不同微操作的组合即可 1980 高级语言和编译器来了，不用再手写指令 编译器很难利用到这么多复杂的指令，生成的汇编代码常用几条指令占 95%，大量的不常用指令占据了微码 ROM。 发明出基于 Mos 的 SRAM，比原先的快 2-10 倍！？？？所以呢 CISC 不适合与流水线 decode 时间不一致，边 decode 边取指，不确定的时间段 寻址模式多，容易引发数据竞争，而且不容易检测 流水线 Pipeline RISC 的架构中出现的，旨在提高处理器处理效率，争取在一个时钟周期中完成一条指令（CPI=1）。</description></item><item><title>课程学习：cs61a</title><link>https://wangloo.github.io/posts/course/cs61a/</link><pubDate>Mon, 17 Jul 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/course/cs61a/</guid><description>学习日历 - 激励自己学习 因为最近在写论文，所以每两天能学习一次，并记录每次学习的事件
2024年1月4日22点09分 配置环境
lab00目录的组成：
lab00.py: The template file you&amp;rsquo;ll be adding your code to ok: A program used to test and submit assignments lab00.ok: A configuration file for ok What Would Python Do? (WWPD)
python3 ok -q python-basics -u --local 结尾的--local避免输入伯克利邮箱。
解释一个函数的组成：
The lines in the triple-quotes &amp;quot;&amp;quot;&amp;quot; are called a docstring, which is a description of what the function is supposed to do.</description></item></channel></rss>