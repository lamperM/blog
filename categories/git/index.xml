<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on BLOG</title><link>https://wangloo.github.io/categories/git/</link><description>Recent content in Git on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 13 Dec 2022 17:39:42 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>git 宝典</title><link>https://wangloo.github.io/posts/tools/git/git/</link><pubDate>Tue, 13 Dec 2022 17:39:42 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/git/git/</guid><description>合并操作: git merge merge行为的语义是将其他分支的修改合并到当前分支。由此就产生了两种内部的实现原理， 以下均假设当前分支为main，其他分支为dev：
fast-forward： three-way merger： Fast-forward Merge main是dev的某个直接祖先，或者说他们之间是一条线的关系。此时将dev的修改合并进来相当于移动main指针指向dev的最新commit(F1)。此时merge称为 fast-forward.
例如, 当前在 main, 执行git merge dev的过程如下:
main main | | M1 --- M2 ===&amp;gt; M1 --- M2 -- F1 \ | \--- F1 dev | dev three-way Merge 合并的两者不构成直接的祖先-孩子关系，也就意味着main和dev分别位于两个分叉上（见下图左）。此时merge的步骤就相对复杂：
找到main和dev的公共祖先M2 列出main和dev分别基于公共祖先来说做了哪些修改 如果两条分叉的修改不冲突，完美合并 经常出现的是，两个分叉难免对同一片段做了不同修改，此时标记为冲突，等待用户解决 因为main和dev位于两个分叉，合并会新建一个节点（M4），commit的信息是“Merge dev into main”。如果步骤2中产生冲突了，那么解决冲突的行为就被记录到M4的diff。没有冲突时diff是空的。 main main | | M1 --- M2 --- M3 ===&amp;gt; M1 --- M2 --- M3 --- M4 \ \ / \--- F1 \--- F1 --- | | dev dev 因为此时merge需要借助三个 commit(main, dev, 公共祖先)，这种操作就叫做 three-way merge。</description></item></channel></rss>