<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on BLOG</title><link>https://wangloo.github.io/tags/python/</link><description>Recent content in python on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 30 Jul 2024 19:28:12 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python：三方库</title><link>https://wangloo.github.io/posts/python/libs/</link><pubDate>Tue, 30 Jul 2024 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/python/libs/</guid><description>jinja2 要了解jinja2，那么需要先理解模板的概念。 python中自带一个简单的模板，就是string提供的。
&amp;gt;&amp;gt;&amp;gt; import string &amp;gt;&amp;gt;&amp;gt; a = string.Template(&amp;#39;$who is $role&amp;#39;) &amp;gt;&amp;gt;&amp;gt; a.substitute(who=&amp;#39;daxin&amp;#39;,role=&amp;#39;Linux&amp;#39;) &amp;#39;daxin is Linux&amp;#39; &amp;gt;&amp;gt;&amp;gt; a.substitute(who=&amp;#39;daxin&amp;#39;,role=&amp;#39;cat&amp;#39;) &amp;#39;daxin is cat&amp;#39; &amp;gt;&amp;gt;&amp;gt; Python自带的模板功能极其有限，如果我们想要在模板中使用控制语句，和表达式，以及继承等功能的话，就无法实现了。
目前主流的模板系统，最常用的就是jinja2和mako
jinja2是Flask作者开发的一个模板系统，之所以被广泛使用是因为它具有以下优点：
相对于Template，jinja2更加灵活，它提供了控制结构，表达式和继承等。 相对于Mako，jinja2仅有控制结构，不允许在模板中编写太多的业务逻辑。 相对于Django模板，jinja2性能更好。 Jinja2模板的可读性很棒。</description></item><item><title>C/python: cmp函数应该怎么写</title><link>https://wangloo.github.io/posts/c/cmp-func/</link><pubDate>Sun, 20 Aug 2023 17:59:22 +0800</pubDate><guid>https://wangloo.github.io/posts/c/cmp-func/</guid><description>C 中的qsort, python 中的sorted()很多时间需要自己构造比较的规则，也就是告诉排序函数怎么衡量两个值的大小关系？
TL;DR 升序的写法(C-qsort):
int cmp(const void *a, const void *b) { return *(int *)a - *(int *)b; } int main(void) { int nums[] = {2, 1, 3, 5, 4}; qsort(nums, 5, sizeof(int), cmp); return 0; } 升序的写法(python-sorted()):
from functools import cmp_to_key nums = [2, 3, 1, 4, 5] nums = sorted(nums, key=cmp_to_key(lambda x,y: x-y)) print(nums) python3 丢弃了sorted()中的cmp选项， 全部用 key 选项进行指定， 所以需要cmp_to_key进行转换
升序的写法(C++-sort()):
// sort()原型 void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp); bool cmp(int a, int b){ return a &amp;lt; b; } int main(){ int a[10]={8 ,3 ,10 ,9 ,5}; sort(a,a+10,cmp); return 0; } 详解 正如上面所说，cmp 函数的作用是给排序函数一个比较的依据。</description></item><item><title>Python 做机试题目技巧</title><link>https://wangloo.github.io/posts/python/algo/</link><pubDate>Sat, 19 Aug 2023 10:30:35 +0800</pubDate><guid>https://wangloo.github.io/posts/python/algo/</guid><description>排序 使用sorted()来做, 不修改原来的变量, 而是返回一个新的。 自定义cmp函数的例子
被排序的类型必须是iterable的。
字符串 无重复字符的最长子串 def lengthOfLongestSubstring(self, s: str) -&amp;gt; int: mp = {} left, right = 0, 0 max_len = 0 while right &amp;lt; len(s): if s[right] not in mp: mp[s[right]] = 1 else : mp[s[right]] += 1 while mp[s[right]] &amp;gt; 1: mp[s[left]] -= 1 left += 1 max_len = max(max_len, right-left+1) right += 1 return max_len 牛客网处理输入 https://blog.nowcoder.net/n/0632a788b94b4923976b7c82c45eca95
写递归 遇到需要用递归的题目中, 常常需要传值出来. 比如写一个求 sum(1..n)的函数</description></item><item><title>Python 基础知识</title><link>https://wangloo.github.io/posts/python/basic/</link><pubDate>Sat, 01 Apr 2023 10:30:35 +0800</pubDate><guid>https://wangloo.github.io/posts/python/basic/</guid><description>为什么写 因为平常的工作中很少用到python, 但是不得不承认 python是一门优秀的语言, 对于我目前要准备秋招的情况来看, 有的公司做题如果支持python那会简单很多, 同样的代码,用C写要100行, 换到python最多30搞定.
有人说C++也可以啊,而且对于常用C的人来说学习门槛更低, 但是我实在是受不了 C++的语法, 包括但不限于模板、迭代器，STL操作，感觉有点四不像的味道。 当然，这只是我的个人习惯，使用C++的人也是很多的，还是根据自己的习惯 选择一套趁手的工具比较好。
因为我其他时间基本都在用C，所以在本篇文章中我会更多拿C来进行比较，这样更好记忆。
我学习 Python 的知识点来源:
《Python 学习手册 第 4 版》李军等 UCB CS61A 列表 list 列表支持下标索引，所以它就像C语言中的“数组”，列表支持大小动态增长，所以更像“数组plus”，类似C++中的vector吧（不太确定）。
列表支持定长声明或变长声明，像创建一些flag列表，用下标进行查找时，定长创建就是必要的。
相关操作 创建一个列表 以下的创建操作都是支持的:
# 创建一个空列表 lst = [] # 创建一个带有初值的列表 lst = [1, 2] # 创建二维空列表 # 应用的场景是: 按照索引来修改list, 此时如果单纯的初始化list=[], # 那么对list[1].append()会提示超出范围. 所以我们要提前规定list的长度, # 即将list声明为目标长度的二维list. lst = [[] for _ in range(5)] # 创建定长列表并附初值 lst = [0 for _ in range(5)] # 创建二维定长列表并附处置0 lst = [[0 for _ in range(5)] for _ in range(5)] 以下的方式是错误的!</description></item></channel></rss>