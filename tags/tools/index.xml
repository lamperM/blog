<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tools on BLOG</title><link>https://wangloo.github.io/tags/tools/</link><description>Recent content in tools on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 17 Dec 2023 15:25:12 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/tags/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Vscode task.json &amp; launch.json</title><link>https://wangloo.github.io/posts/tools/vscode/task_launch/</link><pubDate>Sun, 17 Dec 2023 15:25:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/vscode/task_launch/</guid><description>Task.json Vscode中，可以为编译、打包等过程创建自动化任务，避免每次手动敲一些命令。 在我看来，Vscode Task就像是一个强大的、与Vscode联动的Shell脚本。
创建一个Task 创建一个Task很简答，Terminal-Configure Tasks， 然后根据引导就可以创建一个默认的task，对他进行配置的文件是workspace/.vscode/task.json。
展示一下我刚刚创建的一个编译并执行单元测试的任务，关键的参数是label也就是任务的名字， type除了shell不知道还有啥，command就是该任务会执行的shell命令。 更多的参数下面会介绍。
1{ 2 // See https://go.microsoft.com/fwlink/?LinkId=733558 3 // for the documentation about the tasks.json format 4 &amp;#34;version&amp;#34;: &amp;#34;2.0.0&amp;#34;, 5 &amp;#34;tasks&amp;#34;: [ 6 { 7 &amp;#34;label&amp;#34;: &amp;#34;build-ut&amp;#34;, 8 &amp;#34;type&amp;#34;: &amp;#34;shell&amp;#34;, 9 &amp;#34;command&amp;#34;: &amp;#34;bash tools/vscode_build_ut.sh&amp;#34;, 10 &amp;#34;presentation&amp;#34;: { 11 &amp;#34;echo&amp;#34;: true, 12 &amp;#34;reveal&amp;#34;: &amp;#34;always&amp;#34;, 13 &amp;#34;focus&amp;#34;: true, 14 &amp;#34;panel&amp;#34;: &amp;#34;shared&amp;#34;, 15 &amp;#34;showReuseMessage&amp;#34;: true, 16 &amp;#34;clear&amp;#34;: false 17 }, 18 &amp;#34;problemMatcher&amp;#34;: [], 19 } 20 ] 21} 支持的参数 支持的参数很多，我主要介绍几个，Vscode的官方文档说的非常通俗易懂，修改参数时最好参考一下。</description></item><item><title>Vim-YouCompleteMe插件国内安装</title><link>https://wangloo.github.io/posts/tools/vim/ycm/</link><pubDate>Fri, 17 Nov 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/vim/ycm/</guid><description>Vim插件YouCompleteMe国内安装 Update 2023/11/23: vim下现在我不用YCM了，换成Coc.nvim来进行代码补全。 不过在我看来其实没有特别明显的优势，所以YCM的配置注意事项还是留在这吧。
YCM 插件对 python, vim 的版本均有要求。
下载 可以使用 vim-plug 等工具下载, 也可以下载源码然后拷贝到.vim目录下
编译 编译用到 python3, 这里是问题最多的一步
1# 编译并添加对C的提示支持 2python3 install.py --clangd-completer --verbose 3 4Searching Python 3.8 libraries... 5... 6Downloading Clangd from https://github.com/ycm-core/llvm/releases/download/13.0.0/clangd-13.0.0-x86_64-unknown-linux-gnu.tar.bz2... 使用--clangd-completer参数时, 脚本会去下载 clangd-14.0.0-x86_64-unknown-linux-gnu.tar.bz2 文件, 比较慢. 也可以提前根据提示的网站自己手动下载压缩包.
下载完成后, 放到本地目录下:
1:~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/cache$ ls 2clangd-14.0.0-x86_64-unknown-linux-gnu.tar.bz2 还需对脚本YouCompleteMe/third_party/ycmd/build.py进行修改, 防止重新下载.
1def DownloadClangd( printer ): 2 ... 3 MakeCleanDirectory( CLANGD_OUTPUT_DIR ) 4 5 if not p.exists( CLANGD_CACHE_DIR ): 6 os.makedirs( CLANGD_CACHE_DIR ) 7 # 注释下面的语句 8 # elif p.</description></item><item><title>openwrt 开发日记</title><link>https://wangloo.github.io/posts/embedded/openwrt/</link><pubDate>Sat, 05 Aug 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/embedded/openwrt/</guid><description>构建 openWRT 我在此步骤失败了，后面项目没有依赖完整的编译过程， 所以可能对你不构成参考
过程可参考官方教程, 编译过程非常长，使用到的工具非常多，这里提供两个优化的思路:
提前安装本地依赖，忘了./scripts/feeds update -a还是./scripts/feeds install -a时需要检查系统的各种依赖, 可以提前统一安装一波.
1sudo apt install g++ 2sudo apt install libncurses5-dev 3sudo apt install zlib1g-dev 4sudo apt install bison 5sudo apt install flex 6sudo apt install unzip 7sudo apt install autoconf 8sudo apt install gawk 9sudo apt install make 10sudo apt install gettext 11sudo apt install gcc 12sudo apt install binutils 13sudo apt install patch 14sudo apt install bzip2 15sudo apt install libz-dev 16sudo apt install asciidoc 17sudo apt install subversion 18sudo apt install python 19sudo apt install git 提前下载dl, dl是默认在编译时下载的一些工具源码, 你可以将他们提前下载好 放到dl/下, 即可省去下载的时间, 特别当你不能翻墙时.</description></item><item><title>工具&amp;&amp;博客站点集合</title><link>https://wangloo.github.io/posts/tools/useful_sites/</link><pubDate>Sat, 05 Aug 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/useful_sites/</guid><description>博客站 向优秀的前辈们学习~
hitzhangjie
腾讯 一本有关Dwarf的gitbook: https://www.hitzhangjie.pro/debugger101.io/ Blog也是基于Hugo构建，风格很好，移动端体验不错。https://www.hitzhangjie.pro/blog/ stdcc
上海交大 IPADS Blog风格很好，https://stdrc.cc/ Slides一定得学习，https://stdrc.cc/slides/write-os-in-rust-2.0/slides.html 用notion整理表格 https://stdrc.notion.site/c93719166f094ac187dfba6fc199b566 &amp;hellip; 工具站 Armv8 寄存器、指令速查：http://hehezhou.cn/a64/ Emoji cheat sheet https://www.webfx.com/tools/emoji-cheat-sheet/ Windows10搭建局域网FTP服务器 跟我一起写Makefile https://seisman.github.io/how-to-write-makefile/Makefile.pdf 网络调试工具 http://free.cmsoft.cn/download/cmsoft/assistant/netassist5.0.3.zip Gnu gcc 内联汇编官方手册: https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html#Using-Assembly-Language-with-C 交叉编译工具 Linaro: 经常用来编译armv7架构的一些项目。 https://releases.linaro.org/components/toolchain/binaries/
Gnu: https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads
目前我组织的ARM64项目都使用 aarch64-none-linux-gnu- 作为交叉编译工具集, 直达链接: https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz</description></item><item><title>开发环境构建指南</title><link>https://wangloo.github.io/posts/tools/dev_env/</link><pubDate>Mon, 17 Jul 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/dev_env/</guid><description>前言 写这篇博客的背景是我实在忍受不了每次换新的开发机器都得费好大的劲来完全恢复以前的环境， 而且，我平常喜欢搜集各种有用的工具、好看的主题，字体这些，如果零零散散的记录，大概率会忘记或者记不得某些细节。
所以，最后期望达到的是能够使我每次在新机器上搭建环境只需要看这一篇文章就可以了。因此这里会记录：
帮助提升开发效率的小工具 好看的字体、主题 配置某些环境的要点及注意事项 🥀 到目前为止，我还未发现一种方式能够完全达到“一键式布置”，这也不是本文的目的。 付出至少半天的时间的一定的，希望未来能发现一种好的方法。
字体 Fira Code 这款字体适合做编程字体，蛮好看的。我在 vscode 和 terminal 下都使用了这款字体。
详情及安装参考github
霞鹜文楷 开源的中文字体，做博客、PPT 不错。
详情及安装参考github
vscode vscode的所有配置通过其内置的sync功能实现, 目前用的是Github账号同步。
Ubuntu2004源 新版本的Clangd Clangd用15+才能用vscode的inlay hint功能。
获取签名
1wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 添加源地址到/etc/apt/sources.list, 修改完后别忘了sudo apt update
1# 15, 后缀可以改成你需要的版本号 2deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main 3deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main 新版本的Vim Vim 8+才有pack插件管理
1sudo add-apt-repository ppa:jonathonf/vim 终端软件安装 源替换 apt 1sudo apt install python3-pip 2sudo apt install tmux 3sudo apt install fzf 4sudo apt install zsh 5sudo apt install cmake pip3 1# CLI 代码高亮 2sudo pip3 install pygments shell zsh oh-my-zsh oh-my-zsh可以看作对zsh的配置文件做一层抽象，使配置更方便。 带来的缺点就是速度变慢。</description></item><item><title>Sed/Awk/Grep 三剑客</title><link>https://wangloo.github.io/posts/tools/sed_awk_grep/</link><pubDate>Tue, 03 Jan 2023 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/sed_awk_grep/</guid><description>Sed Sed stands for Stream Editor.
Basic sed syntax:
1sed [options] {sed-commands} {input-file} Sed reads one line at a time from the {input-file} and executes the {sed-commands} on that particular line
The input 并非必须是文件
echo &amp;quot;Some string&amp;quot; | sed '' 当然也是支持的.
Option: -n 通常sed是按照行来处理文本的, 然后打印处理后的结果. 然而并不是符合匹配的行被打印, 所有的行都会被打印. 例如sed 's/t/T/'会输出所有的行, 并且替换其中某些行的t.
这样的结果不是我们想见的(大多数情况下), 所以, 我们可以添加-n option 来 禁止自动打印所有内容, 例如sed -n 's/t/T/' 不会输出任何结果.
如果想要将匹配的结果单独打印, 则sed为我们提供了p命令. 例如, sed -n 's/t/T/p' 只会打印替换后的行.</description></item><item><title>git 宝典</title><link>https://wangloo.github.io/posts/tools/git/git/</link><pubDate>Tue, 13 Dec 2022 17:39:42 +0800</pubDate><guid>https://wangloo.github.io/posts/tools/git/git/</guid><description>合并操作: git merge merge 有两种方式:
fast-forward three-way merger Fast-forward Merge 假设合并的双方为main为dev, 如果其中一个是另一个的祖先, 此时直接移动 HEAD 到前方即可, 称为 fast-forward.
例如, 当前在 main, 执行git merge dev的过程如下:
1 main main 2 | | 3M1 --- M2 ===&amp;gt; M1 --- M2 -- F1 4 \ | 5 \--- F1 dev 6 | 7 dev three-way Merge 合并的两者不构成直接的祖先-孩子关系, 产生了分叉. 此时进行合并就需要有个基准(参考), 对于两边相较于基准的每个 diff 来说:
合并的两者都在基准上进行了改动, 且改动不一致, 标记为冲突 如果该 diff仅在其中一方有改动, 那么就保留此次改动 合并时使用的参考就是两个合并 commit 的最近公共祖先, 这种借助三个 commit(main, dev, 公共祖先)才能完成的合并操作就叫做 three-way merge.</description></item></channel></rss>