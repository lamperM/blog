<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arm Trusted Firmware on BLOG</title><link>https://wangloo.github.io/tags/arm-trusted-firmware/</link><description>Recent content in Arm Trusted Firmware on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 31 Aug 2024 19:28:12 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/tags/arm-trusted-firmware/index.xml" rel="self" type="application/rss+xml"/><item><title>ATF 解读：简介</title><link>https://wangloo.github.io/posts/os/atf/</link><pubDate>Sat, 31 Aug 2024 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/os/atf/</guid><description>Arm Trusted Firmware 首先，必须要说明的是，ATF 属于一个代码框架，基于他的代码框架实现的服务能够保证是安全的。
ATF 的主要特性包括：
安全设备的初始化框架。ATF 的 boot 流程会走到 EL3/SEL1，提供了一个框架添加安全设备的初始化代码。 完整的 boot 启动框架。其实并不只是安全相关，从 bootROM 到 Linux，其中会经过 BL1、BL2、BL31、BL32、BL33，这都属于 ATF 的一部分，ATF 提供了完整的启动框架，包括了每个安全状态下的每个 EL。 为什么要提供一套完整框架的原因是，确保每个启动阶段都是安全的。每个镜像在执行前都会有验签过程，确保镜像的完整性。 BL31 中有 REE 和 TEE 切换的实现。 支持整合多种 TrustOS 有 recovery mode 的实现，进行镜像的替换升级 电源管理代码框架 BL31 有一些运行时服务，不像其他阶段过去了就被释放 基于 ARMv7 的不同 mode，和 ARMv8 更近一步的等级和安全状态划分，ATF 将各个区域进行分割，使得各个功能模块更加独立。要不然，在此之前每个 OS 都要包括自己的电源管理、安全状态切换的代码。特别是 EL3 有自己的中断向量和内存映射之后，这种隔离性又大大增强。
Trust OS BL32 是 TrustOS，最初，TrustOS 提供基本的设备安全服务，例如可信引导或加密服务。如今，TrustOS 已发展到支持定制应用程序，这些应用程序可用于多种安全场景，例如安全支付或摄像头隐私保护等。
没有 SEL2 时的安全服务请求路径 图中绿色的都是和 Trusty 相关的
为什么有 SEL1 和 SEL0？因为安全功能服务的增多，bearmetal 的代码难以维护且容易出错，所以有了运行在 SEL1 的 trustOS，其中有安全外设的驱动。 市面上有多种 trustOS，每个开发安全应用 SEL0 的厂价都需要依赖某个特定 TrustOS 提供的 TA library，这对需要发布大量应用程序的 OEM 来说是一个问题，因为不同的应用程序与不同的可信操作系统绑定。SEL1 要运行多个 OS 很困难。 如上图所示，EL3 中需要有对 SMC 请求的处理，既 解决上述挑战需要一种能够促进组件化和硬件隔离的架构。该解决方案需要从 TrustZone 提供的安全隔离（仅提供两个世界之间的隔离）扩展到可以提供多个相互不信任的镜像之间隔离的架构。</description></item></channel></rss>