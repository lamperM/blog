<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Qemu on BLOG</title><link>https://wangloo.github.io/tags/qemu/</link><description>Recent content in Qemu on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 04 Jan 2024 19:28:12 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/tags/qemu/index.xml" rel="self" type="application/rss+xml"/><item><title>Qemu 启动 Linux Kernel(Arm64)</title><link>https://wangloo.github.io/posts/os/arm64-linux-qemu/</link><pubDate>Thu, 04 Jan 2024 19:28:12 +0800</pubDate><guid>https://wangloo.github.io/posts/os/arm64-linux-qemu/</guid><description>最终效果 用的环境和各个软件版本为：
Qemu: 8.1.50 (qemu-system-aarch64 -M virt) linux-4.9.1 u-boot-2023.10 busybox-1.34.0 经过一番折腾，还是没有成功 Qemu+Uboot 来引导 linux 内核， 因为 virt 板级不支持-sd参数，主要的折腾过程见下。 但理论上也可以，只是后面发现没啥必要，用-kernel也能完成目前需求。 -kernel形式下功能没问题，有 Rootfs，可以在 Guest 中读写。
准备 Linux 内核镜像 下载 Linux 内核版本历史 - 维基百科 上海交通大学镜像站 编译 Linux kernel 使用 make 来构建，可以键入make help查看支持的命令：
Cleaning targets: clean - Remove most generated files but keep the config and enough build support to build external modules mrproper - Remove all generated files + config + various backup files distclean - mrproper + remove editor backup and patch files Configuration targets: config - Update current config utilising a line-oriented program nconfig - Update current config utilising a ncurses menu based program menuconfig - Update current config utilising a menu based program xconfig - Update current config utilising a Qt based front-end gconfig - Update current config utilising a GTK+ based front-end 不同 Linux 内核镜像的区别 vmlinux vmlinux 是可引导的、未压缩、可压缩的内核镜像，vm 代表 Virtual Memory。 （表示 Linux 支持虚拟内存，因此得名 vm）它是由用户对内核源码编译得到， 实质是 elf 格式的文件.</description></item><item><title>QEMU 工作原理</title><link>https://wangloo.github.io/posts/qemu/1/</link><pubDate>Fri, 08 Sep 2023 16:21:27 +0800</pubDate><guid>https://wangloo.github.io/posts/qemu/1/</guid><description>Qemu 的工作方式 Qemu有两种工作方式：全系统模拟（Full-system emulation）和用户模拟（User-mode emulation）。
用户模拟仅仅对目标格式的Elf文件进行指令翻译并执行， 在遇到需要使用系统资源的命令（通过系统调用）时， 就转换成实际host的系统调用来完成，将执行完的结果返回。 Elf就是一个用户态的应用，不能直接操作硬件。 总之，用户模式下Qemu仅仅实现了讲Guest指令翻译为Host指令并执行， 不模拟资源。
全系统模拟的方式下，Qemu在用户态模拟了完整的一套Guest硬件资源， 包括Cpu、内存、外设等，此时Qemu更像是一个虚拟机管理器。 Guest Elf可以直接对硬件进行操作。
指令翻译 在 host 上运行 guest 架构代码的能力由 QEMU TCG 模块提供。
TCG 做指令翻译的思路是 “边翻译边执行”， 并且将翻译工作分为前后端，中间会有一层中间指令， 这样能够方便添加对新指令的支持。这个有点类似于现代编译器，也是由类似间结果的流程，称为 IR。
TCG 执行一次翻译的单位是 Translation Block，以分支跳转、页边界为划分条件。
Qemu 全系统模拟启动内核 &amp;ndash;kernel选项后面接一个Elf格式的系统镜像，Qemu内部用seaBios来实现引导Elf， 所以我们可以不关心如何引导Elf的问题。</description></item></channel></rss>