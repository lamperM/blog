<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thinking on BLOG</title><link>https://wangloo.github.io/tags/thinking/</link><description>Recent content in Thinking on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 17 Dec 2023 17:19:44 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/tags/thinking/index.xml" rel="self" type="application/rss+xml"/><item><title>一些胡思乱想</title><link>https://wangloo.github.io/posts/thinking/growth/</link><pubDate>Sun, 17 Dec 2023 17:19:44 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/growth/</guid><description>回顾实习结束前 2024年1月13日
在HW实习的最后一天有一件事没干妥当，就是走之前没有和性能仿真那边打个招呼。 虽然说现在功能和性能已经划分开，但毕竟已经在一起聚过，也一起讨论过工作。 应该正式的打一声招呼再走的。
闻吴起事迹反思 2024年1月12日
吴起是战国初期的军事家，所著《吴起兵法》传播广泛。 但是听百家讲坛中介绍吴起的事迹确实是很难让人赞同。
吴起最早跟随曾子，其母去世后，曾子问为何不回家守孝， 吴起回答专注学习，母亲死了就死了。 在鲁国任命时，因为其妻子是齐国人，被拒绝任命大将军。 吴起知道后，将其妻子杀害，以表忠心。 吴起最终死的很惨，在我看来缘于心恶没有孝心。 只追逐于当下的功名利禄，抛弃了人与人的爱情与亲情， 实在是狼心狗肺之人。
一瞬间我就想到了自己高中时候做的一件错事： 当时我座位的前边是一个非常调皮、爱说话的同学， 时常让我和同桌的好朋友都不得安心学习，在忍无可忍之后， 我居然自己去找班主任换了座位。
这个事情做的也算是自私，没有真正的解决问题而是选择逃避。 把自己的好朋友抛弃，虽然自己得了一方清闲但实属不义之举。 故在此进行反思，以后请做一个重情重义之人，不要被天下人耻笑。
初一、十五不能理发 2024年1月12日
今晚给父母致电告知回家的日期已定，提到今天理发时父亲反应很大， 说初一、十五不能理发，理发要选3、6、9日。这项习俗我确实不知， 长到这么大也没在意过这个，属是不应该。很多老习惯、 老习俗还是需要多了解，是否遵守且再谈，但不应该如此无知。
算命科学吗 2024年1月6日 观： 对话中原：张其成—传统文化的魅力（1）
首先只看八字一定是不科学人的，跟你同一个时辰一起出生的人有很多， 全世界有几千万。所以要看一个人的命有三个方面：天、地、人， 八卦就是这三个方面形成的。
天：你出生的天时 地：你出生的地方，不同地方的人是有文化特征的，地域文化有所不同。 人：最重要的是人自身，人分先天和后天。先天包括相貌、体质、举止， 这些一般来说是难以更改的，大变化没有。重要的也包括后天，就是人的性格。 阿帅与冒老师 2024年1月6日
从去年3、4月份开始，阿帅和冒老师的飞花令游戏引了不少热度， 大部分人和我一样都是想来磕Cp，但是冷静下来想想基本不可能。
下面就把自己假设成阿帅，想想会是什么心理。 冒老师是什么人，上海某高等院校博士，阿帅是北京理工大学珠海学院本科， 这个学历似乎相差比较大，虽然我感觉阿帅绝对不输现在某些高等院校的硕博研究生， 但是不得不考虑冒老师自己和其家庭的考虑。
阿帅在当时粉丝可能十万左右，也是靠着这一波热度涨了不少粉丝， 那么想想冒老师这么做的动机是什么呢？ 首先，她也非常喜欢诗词，与阿帅讨论诗词、玩飞花固然可以理解， 但为什么要搞得像暧昧不清的关系呢？在这里我感觉应该冒老师是想借助阿帅的热度来建立自己的粉丝。 后面也确实如此，现在也算是几万粉丝的Up主了，给她刷礼物的人也非常多，毕竟有学识、 声音又甜、情商还高的人谁不喜欢呢？
感谢室友 2024 年 1 月 1 日
最近这段时间（半年左右）对诗词有不小的兴趣，尤其经常通过看阿帅的直播来长知识， 在成都那阵就自己在房间里看，去上海也是在自己房间里。就这次实习结束之后在宿舍放了台电脑， 这下大部分时候是下班回去在宿舍里看，因为舍友也经常在桌子上用电脑， 所以很多时候我外放的直播或者视频他也会听着，时不时互动一下。
为什么我会选择外放呢？其实我也想过也观察过，我舍友这个人呢比较直， 一般想什么就会说什么，说实话大部分时候和他聊天也会聊不到一块去， 经常就是话不投机半句多。这种性格呢其实适合讨论一些专门的问题， 不管是专业方面还是诗词方面，讨论问题就是讨论问题，他不会想其他的方面， 专注于这个问题本身了。而且感觉他对诗词也是有一些兴趣的， 可能也不算是兴趣吧，至少不讨厌它，所以遇到想不起来的诗词问他， 还是讨论一些历史背景都是挺有趣的，感觉找到了他的“正确使用方式”。</description></item><item><title>杂乱的开发日记</title><link>https://wangloo.github.io/posts/thinking/dev_note/</link><pubDate>Sun, 17 Dec 2023 17:19:44 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/dev_note/</guid><description>零零碎碎的开发笔记，如果思考比较多应该写成单独的博文。
6.828 还能这么拷贝代码 将一段汇编代码从一个地址拷贝到另一个地址，你会怎么做？
我能想到的是利用链接脚本，将该段代码限定在某个段里，然后利用变量来定位代码所在的地址，执行拷贝。
init.c的boot_aps()提供了一种新的思路：在代码的前后定义一个全局变量，就能在外面访问到代码的地址和范围了。
转换函数的一种写法 我们经常会用到两种指代之间的转换，比如用id找到结构体指针（JOS中的envid2env），你会怎么设置函数的参数和返回值？
我以前只能想到：
1struct Env *envid2env(envid_t envid) 正常情况下返回转换完成的结构体指针，否则返回NULL。
然而，JOS提供了一种别样的实现方式：
1int 2envid2env(envid_t envid, struct Env **env_store, bool checkperm) 3{ 4 struct Env *e; 5 6 // If envid is zero, return the current environment. 7 if (envid == 0) { 8 *env_store = curenv; 9 return 0; 10 } 11 12 e = &amp;amp;envs[ENVX(envid)]; 13 if (e-&amp;gt;env_status == ENV_FREE || e-&amp;gt;env_id != envid) { 14 *env_store = 0; 15 return -E_BAD_ENV; 16 } 17 18 if (checkperm &amp;amp;&amp;amp; e !</description></item><item><title>Thinking: Config Linux Network</title><link>https://wangloo.github.io/posts/thinking/cfg_linux_ip/</link><pubDate>Fri, 08 Dec 2023 17:19:44 +0800</pubDate><guid>https://wangloo.github.io/posts/thinking/cfg_linux_ip/</guid><description>起因：今天与一位同学一起尝试去配置Linux静态IP，这中间有不少坎坷，想简单把思考的过程写下来， 复盘一下是不是应该有可以更快的定位到问题并解决的方案。
提出问题 Cl同学想要达到启动Linux后自动设置某个静态Ip的效果， 在我的理解里这并不是一件很复杂的事。
他给我的想法是在Kernel Command Line参数中指定Ip， 我之前没有看到过这种方式配网，但是网上搜了一下确实有这样的例子。 所以他目前已经完成的是:
Linux是通过Uboot起的，要增加Linux Command Line， 可能是在Uboot的bootargs中添加。 但是他在修改完bootargs并重启的时候，发现变量没有成功赋值， 即使已经成功saveenv。所以就邀请我和他一起讨论。
动手实践 了解到问题之后，我先说出了我的想法：
配置静态Ip这个事其实我第一时间想到的是以前修改/etc/network/interfaces文件的方式 但是我愿意陪他先看下为什么命令行参数没有配置上去 这是两条路，因为他的系统里没有真正的文件系统，而是initrd， 所以我提出的方案需要去解包inird的压缩文件，还是尽量先去研究为什么命令行参数没有配置上去。
为什么CMDLINE没有配置上去呢? 首先它说bootargs没有保存成功，这个我也不知道为啥， 可以先不管，即便在每次启动之前在Uboot里设置了Bootargs， 他说在启动之后Kernel的打印也没有输出配置的项目。
Uboot中Bootargs设置的值是和Kernel Command Line配套吗？ 这个我反正是不太确定。
好，那能不能通过别的方式来设置CmdLine呢？ 我们搜索找到了两种方式：
Dts中 Menuconfig中修改 没有尝试Menuconfig是因为他说“目前Menuconfig配置的CmdLine为空， 但是实际Kernel启动后又是有值输出的，那么说明肯定是其他的地方有添加。” 对于这句话我也表示认同，Menuconfig里给的说明是：“默认配置”， 所以即便添加了也无法保证会不会被其他的给冲刷掉。所以，一个根本问题就是： CmdLine配置的顺序，或者说优先级是什么？
先去Dts里改改试试吧，找到了一个chosen结点有关于bootargs的配置， 不管怎么样改了一下，发现并没有生效，和最终Kernel输出的对不上。
所以，看起来修改CmdLine这条路要失败了，只能去修改initrd试试。
修改Initrd达到目的 initrd是打包好的，用的是cpio+lz4的方式。要修改首先要把他解开， 解开到还好说，网上能搜得到命令。 但是重新压缩回去问题很多，前期我就想到了我在华为实习时期遇到的类似的问题， 压缩的算法不对、打包的版本差异都会导致Kernel无法解析重新打包的initrd而panic。
实际也遇到了这个问题，但是这有个小插曲：即便是换回原来的initrd也还是panic。 最终破案是因为需要make clean之后重新make，猜测可能是用了什么中间文件。 不得不感慨Linux Kernel的构建还是相当复杂的。
问题来了：修改/etc/network/interfaces并没有改变静态Ip， 这就使我产生了疑惑，想着可以先在系统启动之后修改试试嘛， 执行ip down和ipup发现确实没有成功修改，这不禁让我想问为什么？
此时，我们突然想到一个问题，既然shell命令能成功修改Ip， 那么就在启动时增加一个脚本去执行设置Ip的行动，不就行了吗？
确实是可以的，所以暂时先不管为什么interfaces不生效。 那就修改有关于/etc/init.d和/etc/inittab相关的知识了， 这一部分我就没参与了，网上的资料的非常全，最终是成功达到目的。
感慨 虽然成功达到了目的，但是消耗了4个小时左右的时间，我觉得这件事并不应该这么复杂。 主要原因是Linux可以配置网络的方式太多了，以至于像我们这种不是非常熟悉的人一时间不知道如何下手。</description></item></channel></rss>