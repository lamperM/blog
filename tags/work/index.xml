<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>work on BLOG</title><link>https://wangloo.github.io/tags/work/</link><description>Recent content in work on BLOG</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 10 Jun 2023 08:51:49 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/tags/work/index.xml" rel="self" type="application/rss+xml"/><item><title>面试总结：特斯拉实习</title><link>https://wangloo.github.io/posts/work/tesla/</link><pubDate>Sat, 10 Jun 2023 08:51:49 +0800</pubDate><guid>https://wangloo.github.io/posts/work/tesla/</guid><description>上午结束了特斯拉嵌入式实习生-Linux platform的二面，特斯拉实习生 一共有三轮面试，一轮和二轮都是技术面，三面是主管面。 目前我完成了所有的技术面，且不论结果如何，整个面试过程对我而言还是收获颇丰的， 故以此文整理下自己的欠缺的技术知识，希望下次能够表现的更好。
二面 首先，此轮面试的面试官显然比上一轮更有礼貌一些，准时与会+介绍自己，不过有一点 是我开了摄像头他没开，也没有进行说明吧。 不过这些都是小事，我们这次主要谈论 技术的内容。
我在此回顾几个没有回答好的问题，供以后做参考。
ELF 文件的加载流程 原回答
拿到 ELF 存储的地址后，先将头部读出来，长度是固定的。头部有校验字段， maigic number, 然后是确认 ELF 编译的架构，位数是否正确。 确认格式正确后，读取程序头表，其中保存了各个需要加载的段的偏移，根据 base+段偏移能够得到该段的位置，然后根据段属性的不同，选择映射到不同 的区域和属性，例如 text 段映射为 RE, 代码段映射为 RW，清空 BSS 等 说明自己没接触过动态库文件，所以对动态加载不是很熟悉 点评如下: 对段表、程序头表，这些概念的区分还不是很熟，不清楚什么时候用 section table， 什么时候用 program header table. 以前都看过，只是 时间长了不用就忘记了，这一部分需要好好的做下笔记。
全局变量存在哪？谁负责初始化的 原回答
不知道。
全局保量存在的位置：
未初始化的全局变量 ==&amp;gt; bss段 const修饰的全局变量 ==&amp;gt; rodata段 其他已初始化的全局变量 ==&amp;gt; data段 对于已初始化的全局变量的访问，编译时，编译器将值存入data段，访问的指令是通过 相对寻址来做，例如相对于data段开头。对于静态链接来说，编译完成后访问指令的 基地址和偏移都是空，当链接时修改指令，即重定位的过程。
aligned_alloc()设计 这是面试最后的程序设计题，我也是没有做好，后面好歹在面试官的无数次提示中， 写出了一个解，题目很棒，只是自己实习不够，怪不得其他。</description></item></channel></rss>