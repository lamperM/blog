<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>makefile on Wangloo's BLOG</title><link>https://wangloo.github.io/tags/makefile/</link><description>Recent content in makefile on Wangloo's BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>@2019 Notepadium.</copyright><lastBuildDate>Sat, 03 Dec 2022 19:08:22 +0800</lastBuildDate><atom:link href="https://wangloo.github.io/tags/makefile/index.xml" rel="self" type="application/rss+xml"/><item><title>Makefile 一些技巧</title><link>https://wangloo.github.io/posts/c/makefile_tricks/</link><pubDate>Sat, 03 Dec 2022 19:08:22 +0800</pubDate><guid>https://wangloo.github.io/posts/c/makefile_tricks/</guid><description>规则的执行顺序 如果不从命令行传入目标, Makefile中定义的规则其实是以从上而下的顺序执行的, 但是我习惯把 all 这种默认规则放在最下面, 所以一般我们可以看到很多Makefile会在开头写一句规则all:, 作用就是告诉make默认(不显式指定)的目标是all.
Busybox 根目录 Makefile 中的做法示例
# That&amp;#39;s our default target when &amp;gt;none is given on the command line .PHONY: _all _all: 使用shell 变量 Make 将 $$var 转义为$var, 供shell处理.
demo(源自6.828 根目录GNUmakefile):
handin-check: @if test -n &amp;#34;`git status -s`&amp;#34;; then \ git status -s; \ read -p &amp;#34;Untracked files will not be handed in. Continue? [y/N] &amp;#34; r; \ test &amp;#34;$$r&amp;#34; = y; \ fi 以上demo还使用了 test 命令来终止make的执行, 如果用户没有输入y, make将会终止执行</description></item><item><title>GCC '-M' and Related Parameters</title><link>https://wangloo.github.io/posts/c/gcc_-m_related/</link><pubDate>Tue, 26 Apr 2022 19:08:22 +0800</pubDate><guid>https://wangloo.github.io/posts/c/gcc_-m_related/</guid><description>As we all know, there are huge number of parameters for GCC. With them, we can make many things possible. Now we talk about -M and related ones. After reading this article, you will know the meaning of there magic parameters. And I will put some little demos follows. Finally, we will see what can they do in really project. Let&amp;rsquo;s go ahead.
实例规则 以下的分析都是基于这样一个生成目标文件的规则, 应该来说具有一定的通用性。
build/obj/main.o: src/main.c $(CC) $(CFLAGS) $(INCLUDES) -c $&amp;lt; -o $@ main.</description></item></channel></rss>